
Dominguez/RTOS_I/RTOS1_15CO/A3/out/A3.elf:     file format elf32-littlearm
Dominguez/RTOS_I/RTOS1_15CO/A3/out/A3.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000549

Program Header:
0x70000001 off    0x00011e4c vaddr 0x1a001e4c paddr 0x1a001e4c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000194 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001e54 memsz 0x00001e54 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001e54 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e48  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a001e54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000194  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a001e48  1a001e48  00011e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001e4c  1a001e4c  00011e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  100001dc  100001dc  00020048  2**2
                  CONTENTS
 19 .debug_info   00023390  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000048fe  00000000  00000000  000433d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000073a2  00000000  00000000  00047cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000998  00000000  00000000  0004f078  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000009a8  00000000  00000000  0004fa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000df48  00000000  00000000  000503b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000133cc  00000000  00000000  0005e300  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000293a0  00000000  00000000  000716cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009aa6c  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0009aad4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001710  00000000  00000000  0009ab08  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001e48 l    d  .init_array	00000000 .init_array
1a001e4c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001dc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
10000058 l     O .bss	00000010 led_task_index
00000000 l    df *ABS*	00000000 button.c
1a0003a8 l     F .text	0000003c FSMButtonUpdate
1a0003e4 l     F .text	0000001e RisingState
1a000402 l     F .text	00000014 DownState
1a000416 l     F .text	0000001e FallingState
1a000434 l     F .text	00000014 UpState
10000068 l     O .bss	00000060 edu_ciaa_keys
00000000 l    df *ABS*	00000000 key_time_counter.c
100000c8 l     O .bss	00000020 time_counter
00000000 l    df *ABS*	00000000 board.c
1a0005d4 l     F .text	00000044 Board_LED_Init
1a000618 l     F .text	00000040 Board_TEC_Init
1a000658 l     F .text	00000040 Board_GPIO_Init
1a000698 l     F .text	00000030 Board_ADC_Init
1a0006c8 l     F .text	00000038 Board_SPI_Init
1a000700 l     F .text	00000024 Board_I2C_Init
1a001bec l     O .text	00000008 GpioButtons
1a001bf4 l     O .text	0000000c GpioLeds
1a001c00 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001c18 l     O .text	00000004 InitClkStates
1a001c1c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0008ac l     F .text	0000002c Chip_UART_GetIndex
1a001c90 l     O .text	00000008 UART_BClock
1a001c98 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000a08 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000a1c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000ad0 l     F .text	000000a0 pll_calc_divs
1a000b70 l     F .text	0000010c pll_get_frac
1a000c7c l     F .text	0000004c Chip_Clock_FindBaseClock
1a000ef0 l     F .text	00000022 Chip_Clock_GetDivRate
100000e8 l     O .bss	00000008 audio_usb_pll_freq
1a001cac l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001d18 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0011cc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0011e0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_tick.c
100000f0 l     O .bss	00000004 callBackFuncParams
100000f8 l     O .bss	00000008 tickCounter
10000100 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0013c4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000104 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 seos_pont_2014_scheduler.c
1a00171c l     F .text	00000008 schedulerGoToSleep
00000000 l    df *ABS*	00000000 seos_pont_2014_isr.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001e4c l       .init_array	00000000 __init_array_end
1a001e48 l       .bss_RAM5	00000000 __preinit_array_end
1a001e48 l       .init_array	00000000 __init_array_start
1a001e48 l       .bss_RAM5	00000000 __preinit_array_start
1a000d14 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000130  w    F .text	00000002 DebugMon_Handler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0000c0 g       .text	00000000 __section_table_start
1a000166  w    F .text	00000002 I2C0_IRQHandler
1a000778 g     F .text	00000008 __stdio_init
1a000126  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000ac2 g     F .text	0000000c Chip_ADC_SetResolution
1a001398 g     F .text	0000002c SysTick_Handler
1a000166  w    F .text	00000002 SPIFI_ADCHS_IRQHandler
1a000544  w    F .text	00000002 initialise_monitor_handles
1a000166  w    F .text	00000002 SDIO_IRQHandler
1a000132  w    F .text	00000002 PendSV_Handler
1a000124  w    F .text	00000002 NMI_Handler
1a001e54 g       .ARM.exidx	00000000 __exidx_end
1a0000fc g       .text	00000000 __data_section_table_end
1a000166  w    F .text	00000002 UART1_IRQHandler
1a0017b0 g     F .text	00000044 schedulerDispatchTasks
53ff74ea g       *ABS*	00000000 __valid_user_code_checksum
1a001e54 g       .ARM.exidx	00000000 _etext
1a000166  w    F .text	00000002 USB1_IRQHandler
1a000344 g     F .text	0000002c keys_service_task
1a000166  w    F .text	00000002 TIMER3_IRQHandler
1a000f92 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000166  w    F .text	00000002 UART0_IRQHandler
1a000154 g     F .text	00000012 bss_init
1a000166  w    F .text	00000002 SGPIO_IRQHandler
10000048 g     O .bss	00000010 led_state
1a00187c g     F .text	00000000 .hidden __aeabi_uldivmod
100001dc g       .noinit	00000000 _noinit
1000010c g     O .bss	00000004 SystemCoreClock
1a0008d8 g     F .text	00000054 Chip_UART_Init
1a000166  w    F .text	00000002 ADC0_IRQHandler
1a00012c  w    F .text	00000002 UsageFault_Handler
1a001010 g     F .text	0000004c Chip_Clock_GetRate
1a0007b8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0018ac g     F .text	000002d0 .hidden __udivmoddi4
1a001be8 g     O .text	00000004 ExtRateIn
1a000166  w    F .text	00000002 IntDefaultHandler
1a000166  w    F .text	00000002 SSP0_SSP1_IRQHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001724 g     F .text	00000048 schedulerAddTask
1a001e4c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001b80 g     F .text	00000048 __libc_init_array
1a000166  w    F .text	00000002 ADC1_IRQHandler
10000108 g     O .bss	00000001 errorCode
1a000166  w    F .text	00000002 RIT_WDT_IRQHandler
1a000166  w    F .text	00000002 FLASH_EEPROM_ATIMER_IRQHandler
1a000748 g     F .text	00000030 Board_Init
1a0005d2  w    F .text	00000002 _init
1a0000c0 g       .text	00000000 __data_section_table
1a000166  w    F .text	00000002 RTC_IRQHandler
100001dc g       .bss	00000000 _ebss
1a000166  w    F .text	00000002 TIMER0_IRQHandler
1a000548 g     F .text	00000088 Reset_Handler
1a00131c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000874 g     F .text	00000038 Chip_I2C_SetClockRate
1a000166  w    F .text	00000002 LCD_IRQHandler
1a000cc8 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000166  w    F .text	00000002 M4_IRQHandler
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000136 g     F .text	0000001e data_init
1a000850 g     F .text	00000024 Chip_I2C_Init
1a000e84 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001d60 g     O .text	000000e6 gpioPinsInit
1a0011f8 g     F .text	00000012 Chip_SSP_SetClockRate
1a001676 g     F .text	00000016 gpioToggle
1a001864 g     F .text	00000018 schedulerStart
1a000f6c g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a000a90 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00120a g     F .text	0000003e Chip_SSP_SetBitRate
1a00176c g     F .text	00000044 schedulerDeleteTask
1a000166  w    F .text	00000002 I2S0_I2S1_QEI_IRQHandler
1a000448 g     F .text	00000024 FSMButtonInit
1a0011c8 g     F .text	00000002 Chip_GPIO_Init
1a001c14 g     O .text	00000004 OscRateIn
100001dc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000124 g       .text	00000000 __bss_section_table_end
1a0004d8 g     F .text	0000006c FSMKeyTimeCounterUpdate
1a0013f8 g     F .text	000001ac gpioInit
1a0012d4 g     F .text	00000004 sleepUntilNextInterrupt
1a000490 g     F .text	00000024 CheckFallState
1a001b7c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00168c g     F .text	0000001c USB0_IRQHandler
1a000166  w    F .text	00000002 SCT_IRQHandler
1a000d30 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001bc8 g     F .text	00000010 memset
1a000128  w    F .text	00000002 MemManage_Handler
1a000370 g     F .text	00000038 main
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00012e  w    F .text	00000002 SVC_Handler
1a0017f4 g     F .text	00000048 schedulerUpdate
1a000fa0 g     F .text	0000003c Chip_Clock_EnableOpts
1a000d4c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000e04 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001280 g     F .text	00000038 SystemInit
1a0000fc g       .text	00000000 __bss_section_table
1a0015a4 g     F .text	0000006a gpioWrite
1a0005d0  w    F .text	00000002 _fini
1a000a50 g     F .text	00000040 Chip_ADC_Init
1a0004b4 g     F .text	00000024 FSMKeyTimeCounterInit
10000110 g     O .bss	00000004 g_pUsbApi
1a000780 g     F .text	00000038 Board_SetupMuxing
1a00092c g     F .text	000000dc Chip_UART_SetBaudFDR
1a0012d8 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a000166  w    F .text	00000002 SPI_DAC_IRQHandler
1a00046c g     F .text	00000024 CheckRaiseState
1a000300 g     F .text	00000044 task_led
1a000166  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a000166  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0012e4 g     F .text	00000020 tickCallbackSet
100001dc g       .bss	00000000 _pvHeapStart
1a000166  w    F .text	00000002 UART2_CAN1_IRQHandler
1a000124 g       .text	00000000 __section_table_end
1a001248 g     F .text	00000038 Chip_SSP_Init
1a000724 g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a000830 g     F .text	00000020 Chip_I2C_EventHandler
1a000166  w    F .text	00000002 M0SUB_IRQHandler
1a001070 g     F .text	00000158 Chip_SetupCoreClock
1a000000 g     O .text	00000040 g_pfnVectors
1a00105c g     F .text	00000014 SystemCoreClockUpdate
1a000166  w    F .text	00000002 DMA_IRQHandler
1a000166  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001b7c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00012a  w    F .text	00000002 BusFault_Handler
1a000fdc g     F .text	00000034 Chip_Clock_Enable
1a000166  w    F .text	00000002 UART3_IRQHandler
1a000166  w    F .text	00000002 MCPWM_IRQHandler
1a00160e g     F .text	00000068 gpioRead
10000114 g     O .bss	000000c8 schedulerTasks
1a0016a8 g     F .text	00000074 boardInit
1a000040 g     O .text	00000080 g_pfnVendorVectors
1a000166  w    F .text	00000002 GINT1_IRQHandler
1a00183c g     F .text	00000028 schedulerInit
1a001304 g     F .text	00000018 tickPowerSet
1a000f14 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0012b8 g     F .text	0000001c cyclesCounterInit
1a000166  w    F .text	00000002 GPIO4_IRQHandler
1a000824 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 49 05 00 1a 25 01 00 1a 27 01 00 1a     ....I...%...'...
1a000010:	29 01 00 1a 2b 01 00 1a 2d 01 00 1a ea 74 ff 53     )...+...-....t.S
	...
1a00002c:	2f 01 00 1a 31 01 00 1a 00 00 00 00 33 01 00 1a     /...1.......3...
1a00003c:	99 13 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	67 01 00 1a 67 01 00 1a 67 01 00 1a 00 00 00 00     g...g...g.......
1a000050:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000060:	8d 16 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     ....g...g...g...
1a000070:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000080:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000090:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000a0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000b0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...

1a0000c0 <__data_section_table>:
1a0000c0:	1a001e54 	.word	0x1a001e54
1a0000c4:	10000000 	.word	0x10000000
1a0000c8:	00000048 	.word	0x00000048
1a0000cc:	1a001e54 	.word	0x1a001e54
1a0000d0:	10080000 	.word	0x10080000
1a0000d4:	00000000 	.word	0x00000000
1a0000d8:	1a001e54 	.word	0x1a001e54
1a0000dc:	20000000 	.word	0x20000000
1a0000e0:	00000000 	.word	0x00000000
1a0000e4:	1a001e54 	.word	0x1a001e54
1a0000e8:	20008000 	.word	0x20008000
1a0000ec:	00000000 	.word	0x00000000
1a0000f0:	1a001e54 	.word	0x1a001e54
1a0000f4:	2000c000 	.word	0x2000c000
1a0000f8:	00000000 	.word	0x00000000

1a0000fc <__bss_section_table>:
1a0000fc:	10000048 	.word	0x10000048
1a000100:	00000194 	.word	0x00000194
1a000104:	10080000 	.word	0x10080000
1a000108:	00000000 	.word	0x00000000
1a00010c:	20000000 	.word	0x20000000
1a000110:	00000000 	.word	0x00000000
1a000114:	20008000 	.word	0x20008000
1a000118:	00000000 	.word	0x00000000
1a00011c:	2000c000 	.word	0x2000c000
1a000120:	00000000 	.word	0x00000000

1a000124 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000124:	e7fe      	b.n	1a000124 <NMI_Handler>

1a000126 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000126:	e7fe      	b.n	1a000126 <HardFault_Handler>

1a000128 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000128:	e7fe      	b.n	1a000128 <MemManage_Handler>

1a00012a <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00012a:	e7fe      	b.n	1a00012a <BusFault_Handler>

1a00012c <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a00012c:	e7fe      	b.n	1a00012c <UsageFault_Handler>

1a00012e <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00012e:	e7fe      	b.n	1a00012e <SVC_Handler>

1a000130 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000130:	e7fe      	b.n	1a000130 <DebugMon_Handler>

1a000132 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000132:	e7fe      	b.n	1a000132 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000134:	e7fe      	b.n	1a000134 <PendSV_Handler+0x2>

1a000136 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000136:	2300      	movs	r3, #0
1a000138:	4293      	cmp	r3, r2
1a00013a:	d20a      	bcs.n	1a000152 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00013c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00013e:	f850 4b04 	ldr.w	r4, [r0], #4
1a000142:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000146:	3304      	adds	r3, #4
1a000148:	4293      	cmp	r3, r2
1a00014a:	d3f8      	bcc.n	1a00013e <data_init+0x8>
}
1a00014c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000150:	4770      	bx	lr
1a000152:	4770      	bx	lr

1a000154 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000154:	2300      	movs	r3, #0
1a000156:	428b      	cmp	r3, r1
1a000158:	d204      	bcs.n	1a000164 <bss_init+0x10>
        *pulDest++ = 0;
1a00015a:	2200      	movs	r2, #0
1a00015c:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000160:	3304      	adds	r3, #4
1a000162:	e7f8      	b.n	1a000156 <bss_init+0x2>
}
1a000164:	4770      	bx	lr

1a000166 <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000166:	e7fe      	b.n	1a000166 <ADC0_IRQHandler>
1a000168:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00016c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00017c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00018c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00019c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <task_led>:
}

/*==================[definiciones de funciones internas]=====================*/

void task_led(void *param)
{
1a000300:	b510      	push	{r4, lr}
    if (led_state[(gpioMap_t)param - LEDB] == STATE_OFF)
1a000302:	b240      	sxtb	r0, r0
1a000304:	f1a0 042a 	sub.w	r4, r0, #42	; 0x2a
1a000308:	4b0c      	ldr	r3, [pc, #48]	; (1a00033c <task_led+0x3c>)
1a00030a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00030e:	b113      	cbz	r3, 1a000316 <task_led+0x16>
        gpioToggle((gpioMap_t)param);

        /* cambio de estado al led */
        led_state[(gpioMap_t)param - LEDB] = STATE_ON;
    }
    else if (led_state[(gpioMap_t)param - LEDB] == STATE_ON)
1a000310:	2b01      	cmp	r3, #1
1a000312:	d007      	beq.n	1a000324 <task_led+0x24>
        /* cambio de estado al led */
        led_state[(gpioMap_t)param - LEDB] = STATE_OFF;

        schedulerDeleteTask(led_task_index[(gpioMap_t)param - LEDB]);
    }
}
1a000314:	bd10      	pop	{r4, pc}
        gpioToggle((gpioMap_t)param);
1a000316:	f001 f9ae 	bl	1a001676 <gpioToggle>
        led_state[(gpioMap_t)param - LEDB] = STATE_ON;
1a00031a:	4b08      	ldr	r3, [pc, #32]	; (1a00033c <task_led+0x3c>)
1a00031c:	2201      	movs	r2, #1
1a00031e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a000322:	e7f7      	b.n	1a000314 <task_led+0x14>
        gpioToggle((gpioMap_t)param);
1a000324:	f001 f9a7 	bl	1a001676 <gpioToggle>
        led_state[(gpioMap_t)param - LEDB] = STATE_OFF;
1a000328:	4b04      	ldr	r3, [pc, #16]	; (1a00033c <task_led+0x3c>)
1a00032a:	2200      	movs	r2, #0
1a00032c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        schedulerDeleteTask(led_task_index[(gpioMap_t)param - LEDB]);
1a000330:	4b03      	ldr	r3, [pc, #12]	; (1a000340 <task_led+0x40>)
1a000332:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a000336:	f001 fa19 	bl	1a00176c <schedulerDeleteTask>
}
1a00033a:	e7eb      	b.n	1a000314 <task_led+0x14>
1a00033c:	10000048 	.word	0x10000048
1a000340:	10000058 	.word	0x10000058

1a000344 <keys_service_task>:
   @brief Funcion que se ejecuta cada DEBOUNCE_TIME ticks.

   @param param
 */
void keys_service_task(void *param)
{
1a000344:	b510      	push	{r4, lr}
1a000346:	4604      	mov	r4, r0
    uint32_t time = FSMKeyTimeCounterUpdate(param);
1a000348:	f000 f8c6 	bl	1a0004d8 <FSMKeyTimeCounterUpdate>

    if (time)
1a00034c:	b900      	cbnz	r0, 1a000350 <keys_service_task+0xc>
                                                                   (void*)((gpioMap_t)param + (LEDB - TEC1)),        // parametro de la tarea
                                                                   0,        // offset -> 0 = "ejecutate inmediatamente"
                                                                   time      // periodicidad de ejecucion en ticks
        );
    }
}
1a00034e:	bd10      	pop	{r4, pc}
1a000350:	4603      	mov	r3, r0
                                                                   (void*)((gpioMap_t)param + (LEDB - TEC1)),        // parametro de la tarea
1a000352:	b264      	sxtb	r4, r4
        led_task_index[(gpioMap_t)param - TEC1] = schedulerAddTask(task_led, // funcion de tarea a agregar
1a000354:	2200      	movs	r2, #0
1a000356:	1da1      	adds	r1, r4, #6
1a000358:	4803      	ldr	r0, [pc, #12]	; (1a000368 <keys_service_task+0x24>)
1a00035a:	f001 f9e3 	bl	1a001724 <schedulerAddTask>
1a00035e:	3c24      	subs	r4, #36	; 0x24
1a000360:	4b02      	ldr	r3, [pc, #8]	; (1a00036c <keys_service_task+0x28>)
1a000362:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
}
1a000366:	e7f2      	b.n	1a00034e <keys_service_task+0xa>
1a000368:	1a000301 	.word	0x1a000301
1a00036c:	10000058 	.word	0x10000058

1a000370 <main>:
{
1a000370:	b510      	push	{r4, lr}
    boardConfig();
1a000372:	f001 f999 	bl	1a0016a8 <boardInit>
    schedulerInit();
1a000376:	f001 fa61 	bl	1a00183c <schedulerInit>
    FSMKeyTimeCounterInit();
1a00037a:	f000 f89b 	bl	1a0004b4 <FSMKeyTimeCounterInit>
    for ( i = TEC1; i <= TEC4; i++) {
1a00037e:	2424      	movs	r4, #36	; 0x24
1a000380:	e007      	b.n	1a000392 <main+0x22>
        schedulerAddTask(keys_service_task, // funcion de tarea a agregar
1a000382:	2328      	movs	r3, #40	; 0x28
1a000384:	2200      	movs	r2, #0
1a000386:	4621      	mov	r1, r4
1a000388:	4806      	ldr	r0, [pc, #24]	; (1a0003a4 <main+0x34>)
1a00038a:	f001 f9cb 	bl	1a001724 <schedulerAddTask>
    for ( i = TEC1; i <= TEC4; i++) {
1a00038e:	3401      	adds	r4, #1
1a000390:	b264      	sxtb	r4, r4
1a000392:	2c27      	cmp	r4, #39	; 0x27
1a000394:	ddf5      	ble.n	1a000382 <main+0x12>
    schedulerStart(1);
1a000396:	2001      	movs	r0, #1
1a000398:	2100      	movs	r1, #0
1a00039a:	f001 fa63 	bl	1a001864 <schedulerStart>
        schedulerDispatchTasks();
1a00039e:	f001 fa07 	bl	1a0017b0 <schedulerDispatchTasks>
1a0003a2:	e7fc      	b.n	1a00039e <main+0x2e>
1a0003a4:	1a000345 	.word	0x1a000345

1a0003a8 <FSMButtonUpdate>:
   edu_ciaa_keys[array_index].flag_fall = 0;
   return flag;
}
/*=====[Implematation of private functions]==================================*/

static void FSMButtonUpdate(gpioMap_t key_index) {
1a0003a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0003aa:	b085      	sub	sp, #20
   uint8_t array_index = key_index - TEC1;
1a0003ac:	b2c4      	uxtb	r4, r0
1a0003ae:	3c24      	subs	r4, #36	; 0x24
1a0003b0:	b2e4      	uxtb	r4, r4
   edu_ciaa_keys[array_index].tecla = key_index;
1a0003b2:	4e0a      	ldr	r6, [pc, #40]	; (1a0003dc <FSMButtonUpdate+0x34>)
1a0003b4:	0065      	lsls	r5, r4, #1
1a0003b6:	192a      	adds	r2, r5, r4
1a0003b8:	00d3      	lsls	r3, r2, #3
1a0003ba:	18f7      	adds	r7, r6, r3
1a0003bc:	54f0      	strb	r0, [r6, r3]
   void (*DebounceFunc[DEBOUNCE_QTY])(dbn_t *dataTecla) = {UpState, FallingState ,DownState, RisingState};
1a0003be:	4b08      	ldr	r3, [pc, #32]	; (1a0003e0 <FSMButtonUpdate+0x38>)
1a0003c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0003c2:	f10d 0c10 	add.w	ip, sp, #16
1a0003c6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
   DebounceFunc[edu_ciaa_keys[array_index].state](&edu_ciaa_keys[array_index]);
1a0003ca:	787b      	ldrb	r3, [r7, #1]
1a0003cc:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
1a0003d0:	f853 3c10 	ldr.w	r3, [r3, #-16]
1a0003d4:	4638      	mov	r0, r7
1a0003d6:	4798      	blx	r3
}
1a0003d8:	b005      	add	sp, #20
1a0003da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0003dc:	10000068 	.word	0x10000068
1a0003e0:	1a001bd8 	.word	0x1a001bd8

1a0003e4 <RisingState>:
   if (gpioRead(dataTecla->tecla)) {
      dataTecla->state = RISING;
   }
}

static void RisingState(dbn_t *dataTecla) {
1a0003e4:	b510      	push	{r4, lr}
1a0003e6:	4604      	mov	r4, r0
   if (gpioRead(dataTecla->tecla)) {
1a0003e8:	f990 0000 	ldrsb.w	r0, [r0]
1a0003ec:	f001 f90f 	bl	1a00160e <gpioRead>
1a0003f0:	b120      	cbz	r0, 1a0003fc <RisingState+0x18>
      dataTecla->state = UP;
1a0003f2:	2300      	movs	r3, #0
1a0003f4:	7063      	strb	r3, [r4, #1]
      dataTecla->state = DOWN;
   }
}

static inline void buttonReleased(dbn_t *tecla) {
   tecla->flag_rise = 0xFF;
1a0003f6:	23ff      	movs	r3, #255	; 0xff
1a0003f8:	7423      	strb	r3, [r4, #16]
}
1a0003fa:	bd10      	pop	{r4, pc}
      dataTecla->state = DOWN;
1a0003fc:	2302      	movs	r3, #2
1a0003fe:	7063      	strb	r3, [r4, #1]
}
1a000400:	e7fb      	b.n	1a0003fa <RisingState+0x16>

1a000402 <DownState>:
static void DownState(dbn_t *dataTecla) {
1a000402:	b510      	push	{r4, lr}
1a000404:	4604      	mov	r4, r0
   if (gpioRead(dataTecla->tecla)) {
1a000406:	f990 0000 	ldrsb.w	r0, [r0]
1a00040a:	f001 f900 	bl	1a00160e <gpioRead>
1a00040e:	b108      	cbz	r0, 1a000414 <DownState+0x12>
      dataTecla->state = RISING;
1a000410:	2303      	movs	r3, #3
1a000412:	7063      	strb	r3, [r4, #1]
}
1a000414:	bd10      	pop	{r4, pc}

1a000416 <FallingState>:
static void FallingState(dbn_t *dataTecla) {
1a000416:	b510      	push	{r4, lr}
1a000418:	4604      	mov	r4, r0
   if (!gpioRead(dataTecla->tecla)) {
1a00041a:	f990 0000 	ldrsb.w	r0, [r0]
1a00041e:	f001 f8f6 	bl	1a00160e <gpioRead>
1a000422:	b920      	cbnz	r0, 1a00042e <FallingState+0x18>
      dataTecla->state = DOWN;
1a000424:	2302      	movs	r3, #2
1a000426:	7063      	strb	r3, [r4, #1]
}

static inline void buttonPressed(dbn_t *tecla) {
   tecla->flag_fall = 0xFF;
1a000428:	23ff      	movs	r3, #255	; 0xff
1a00042a:	7463      	strb	r3, [r4, #17]
}
1a00042c:	bd10      	pop	{r4, pc}
      dataTecla->state = UP;
1a00042e:	2300      	movs	r3, #0
1a000430:	7063      	strb	r3, [r4, #1]
}
1a000432:	e7fb      	b.n	1a00042c <FallingState+0x16>

1a000434 <UpState>:
static void UpState(dbn_t *dataTecla) {
1a000434:	b510      	push	{r4, lr}
1a000436:	4604      	mov	r4, r0
   if (!gpioRead(dataTecla->tecla)) {
1a000438:	f990 0000 	ldrsb.w	r0, [r0]
1a00043c:	f001 f8e7 	bl	1a00160e <gpioRead>
1a000440:	b908      	cbnz	r0, 1a000446 <UpState+0x12>
            dataTecla->state = FALLING;
1a000442:	2301      	movs	r3, #1
1a000444:	7063      	strb	r3, [r4, #1]
}
1a000446:	bd10      	pop	{r4, pc}

1a000448 <FSMButtonInit>:
void FSMButtonInit(gpioMap_t key_index) {
1a000448:	b430      	push	{r4, r5}
   uint8_t array_index = key_index - TEC1;
1a00044a:	b2c3      	uxtb	r3, r0
1a00044c:	3b24      	subs	r3, #36	; 0x24
1a00044e:	b2db      	uxtb	r3, r3
   edu_ciaa_keys[array_index].tecla = key_index;
1a000450:	4a05      	ldr	r2, [pc, #20]	; (1a000468 <FSMButtonInit+0x20>)
1a000452:	0059      	lsls	r1, r3, #1
1a000454:	18cd      	adds	r5, r1, r3
1a000456:	00ec      	lsls	r4, r5, #3
1a000458:	1915      	adds	r5, r2, r4
1a00045a:	5510      	strb	r0, [r2, r4]
   edu_ciaa_keys[array_index].state = UP;
1a00045c:	2000      	movs	r0, #0
1a00045e:	7068      	strb	r0, [r5, #1]
   edu_ciaa_keys[array_index].flag_rise = FALSE;
1a000460:	7428      	strb	r0, [r5, #16]
   edu_ciaa_keys[array_index].flag_fall = FALSE;
1a000462:	7468      	strb	r0, [r5, #17]
}
1a000464:	bc30      	pop	{r4, r5}
1a000466:	4770      	bx	lr
1a000468:	10000068 	.word	0x10000068

1a00046c <CheckRaiseState>:
bool_t CheckRaiseState(gpioMap_t key_index) { 
1a00046c:	b510      	push	{r4, lr}
   uint8_t array_index = key_index - TEC1;
1a00046e:	b2c4      	uxtb	r4, r0
1a000470:	3c24      	subs	r4, #36	; 0x24
1a000472:	b2e4      	uxtb	r4, r4
   FSMButtonUpdate(key_index);
1a000474:	f7ff ff98 	bl	1a0003a8 <FSMButtonUpdate>
   bool_t flag = edu_ciaa_keys[array_index].flag_rise;   
1a000478:	4a04      	ldr	r2, [pc, #16]	; (1a00048c <CheckRaiseState+0x20>)
1a00047a:	0063      	lsls	r3, r4, #1
1a00047c:	1918      	adds	r0, r3, r4
1a00047e:	00c1      	lsls	r1, r0, #3
1a000480:	4411      	add	r1, r2
1a000482:	7c08      	ldrb	r0, [r1, #16]
   edu_ciaa_keys[array_index].flag_rise = 0;
1a000484:	2300      	movs	r3, #0
1a000486:	740b      	strb	r3, [r1, #16]
}
1a000488:	bd10      	pop	{r4, pc}
1a00048a:	bf00      	nop
1a00048c:	10000068 	.word	0x10000068

1a000490 <CheckFallState>:
bool_t CheckFallState(gpioMap_t key_index) { 
1a000490:	b510      	push	{r4, lr}
   uint8_t array_index = key_index - TEC1;
1a000492:	b2c4      	uxtb	r4, r0
1a000494:	3c24      	subs	r4, #36	; 0x24
1a000496:	b2e4      	uxtb	r4, r4
   FSMButtonUpdate(key_index);
1a000498:	f7ff ff86 	bl	1a0003a8 <FSMButtonUpdate>
   bool_t flag = edu_ciaa_keys[array_index].flag_fall;
1a00049c:	4a04      	ldr	r2, [pc, #16]	; (1a0004b0 <CheckFallState+0x20>)
1a00049e:	0063      	lsls	r3, r4, #1
1a0004a0:	1918      	adds	r0, r3, r4
1a0004a2:	00c1      	lsls	r1, r0, #3
1a0004a4:	4411      	add	r1, r2
1a0004a6:	7c48      	ldrb	r0, [r1, #17]
   edu_ciaa_keys[array_index].flag_fall = 0;
1a0004a8:	2300      	movs	r3, #0
1a0004aa:	744b      	strb	r3, [r1, #17]
}
1a0004ac:	bd10      	pop	{r4, pc}
1a0004ae:	bf00      	nop
1a0004b0:	10000068 	.word	0x10000068

1a0004b4 <FSMKeyTimeCounterInit>:
/*=====[Definitions of private global variables]=============================*/
static time_counter_t time_counter[TEC4-TEC1+1];
/*=====[Delaration of private functions]==================================*/

/*=====[Implematation of public functions]==================================*/
void FSMKeyTimeCounterInit(void) {
1a0004b4:	b510      	push	{r4, lr}
   for(int i=0; i<TEC4-TEC1+1; i++) {
1a0004b6:	2400      	movs	r4, #0
1a0004b8:	e009      	b.n	1a0004ce <FSMKeyTimeCounterInit+0x1a>
      time_counter[i].state = COUNTER_IDLE;
1a0004ba:	4b06      	ldr	r3, [pc, #24]	; (1a0004d4 <FSMKeyTimeCounterInit+0x20>)
1a0004bc:	2200      	movs	r2, #0
1a0004be:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      FSMButtonInit(i+TEC1);
1a0004c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0004c6:	b240      	sxtb	r0, r0
1a0004c8:	f7ff ffbe 	bl	1a000448 <FSMButtonInit>
   for(int i=0; i<TEC4-TEC1+1; i++) {
1a0004cc:	3401      	adds	r4, #1
1a0004ce:	2c03      	cmp	r4, #3
1a0004d0:	ddf3      	ble.n	1a0004ba <FSMKeyTimeCounterInit+0x6>
   }
}
1a0004d2:	bd10      	pop	{r4, pc}
1a0004d4:	100000c8 	.word	0x100000c8

1a0004d8 <FSMKeyTimeCounterUpdate>:
tick_t FSMKeyTimeCounterUpdate(void *param) {
1a0004d8:	b538      	push	{r3, r4, r5, lr}
   gpioMap_t key = (gpioMap_t) param;
1a0004da:	b240      	sxtb	r0, r0
   tick_t time = 0;
   switch (time_counter[key-TEC1].state) {
1a0004dc:	f1a0 0424 	sub.w	r4, r0, #36	; 0x24
1a0004e0:	4b17      	ldr	r3, [pc, #92]	; (1a000540 <FSMKeyTimeCounterUpdate+0x68>)
1a0004e2:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a0004e6:	b133      	cbz	r3, 1a0004f6 <FSMKeyTimeCounterUpdate+0x1e>
1a0004e8:	2b01      	cmp	r3, #1
1a0004ea:	d016      	beq.n	1a00051a <FSMKeyTimeCounterUpdate+0x42>
   tick_t time = 0;
1a0004ec:	2400      	movs	r4, #0
1a0004ee:	2500      	movs	r5, #0
         break;
      default:
         break;
   }
   return time;
}
1a0004f0:	4620      	mov	r0, r4
1a0004f2:	4629      	mov	r1, r5
1a0004f4:	bd38      	pop	{r3, r4, r5, pc}
         if(CheckFallState(key)) {
1a0004f6:	f7ff ffcb 	bl	1a000490 <CheckFallState>
1a0004fa:	b910      	cbnz	r0, 1a000502 <FSMKeyTimeCounterUpdate+0x2a>
   tick_t time = 0;
1a0004fc:	2400      	movs	r4, #0
1a0004fe:	2500      	movs	r5, #0
1a000500:	e7f6      	b.n	1a0004f0 <FSMKeyTimeCounterUpdate+0x18>
            time_counter[key-TEC1].state = COUNTER_RUNNING;
1a000502:	4d0f      	ldr	r5, [pc, #60]	; (1a000540 <FSMKeyTimeCounterUpdate+0x68>)
1a000504:	2301      	movs	r3, #1
1a000506:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
            time_counter[key-TEC1].init_time = tickRead();
1a00050a:	f000 fee5 	bl	1a0012d8 <tickRead>
1a00050e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
1a000512:	6060      	str	r0, [r4, #4]
   tick_t time = 0;
1a000514:	2400      	movs	r4, #0
1a000516:	2500      	movs	r5, #0
1a000518:	e7ea      	b.n	1a0004f0 <FSMKeyTimeCounterUpdate+0x18>
         if(CheckRaiseState(key)) {
1a00051a:	f7ff ffa7 	bl	1a00046c <CheckRaiseState>
1a00051e:	b910      	cbnz	r0, 1a000526 <FSMKeyTimeCounterUpdate+0x4e>
   tick_t time = 0;
1a000520:	2400      	movs	r4, #0
1a000522:	2500      	movs	r5, #0
   return time;
1a000524:	e7e4      	b.n	1a0004f0 <FSMKeyTimeCounterUpdate+0x18>
            time_counter[key-TEC1].state = COUNTER_IDLE;
1a000526:	4d06      	ldr	r5, [pc, #24]	; (1a000540 <FSMKeyTimeCounterUpdate+0x68>)
1a000528:	2300      	movs	r3, #0
1a00052a:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
            time = tickRead() - time_counter[key-TEC1].init_time;
1a00052e:	f000 fed3 	bl	1a0012d8 <tickRead>
1a000532:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
1a000536:	6863      	ldr	r3, [r4, #4]
1a000538:	1ac4      	subs	r4, r0, r3
1a00053a:	f161 0500 	sbc.w	r5, r1, #0
1a00053e:	e7d7      	b.n	1a0004f0 <FSMKeyTimeCounterUpdate+0x18>
1a000540:	100000c8 	.word	0x100000c8

1a000544 <initialise_monitor_handles>:
}
1a000544:	4770      	bx	lr
1a000546:	Address 0x000000001a000546 is out of bounds.


1a000548 <Reset_Handler>:
void Reset_Handler(void) {
1a000548:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00054a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00054c:	4b19      	ldr	r3, [pc, #100]	; (1a0005b4 <Reset_Handler+0x6c>)
1a00054e:	4a1a      	ldr	r2, [pc, #104]	; (1a0005b8 <Reset_Handler+0x70>)
1a000550:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000552:	3304      	adds	r3, #4
1a000554:	4a19      	ldr	r2, [pc, #100]	; (1a0005bc <Reset_Handler+0x74>)
1a000556:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000558:	2300      	movs	r3, #0
1a00055a:	e005      	b.n	1a000568 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00055c:	4a18      	ldr	r2, [pc, #96]	; (1a0005c0 <Reset_Handler+0x78>)
1a00055e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000566:	3301      	adds	r3, #1
1a000568:	2b07      	cmp	r3, #7
1a00056a:	d9f7      	bls.n	1a00055c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00056c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00056e:	4b15      	ldr	r3, [pc, #84]	; (1a0005c4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000570:	e007      	b.n	1a000582 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000572:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000576:	689a      	ldr	r2, [r3, #8]
1a000578:	6859      	ldr	r1, [r3, #4]
1a00057a:	6818      	ldr	r0, [r3, #0]
1a00057c:	f7ff fddb 	bl	1a000136 <data_init>
        SectionLen = *SectionTableAddr++;
1a000580:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000582:	4a11      	ldr	r2, [pc, #68]	; (1a0005c8 <Reset_Handler+0x80>)
1a000584:	4293      	cmp	r3, r2
1a000586:	d3f4      	bcc.n	1a000572 <Reset_Handler+0x2a>
1a000588:	e006      	b.n	1a000598 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00058a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00058c:	6859      	ldr	r1, [r3, #4]
1a00058e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000592:	f7ff fddf 	bl	1a000154 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000596:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000598:	4a0c      	ldr	r2, [pc, #48]	; (1a0005cc <Reset_Handler+0x84>)
1a00059a:	4293      	cmp	r3, r2
1a00059c:	d3f5      	bcc.n	1a00058a <Reset_Handler+0x42>
    SystemInit();
1a00059e:	f000 fe6f 	bl	1a001280 <SystemInit>
    __libc_init_array();
1a0005a2:	f001 faed 	bl	1a001b80 <__libc_init_array>
    initialise_monitor_handles();
1a0005a6:	f7ff ffcd 	bl	1a000544 <initialise_monitor_handles>
    main();
1a0005aa:	f7ff fee1 	bl	1a000370 <main>
        __asm__ volatile("wfi");
1a0005ae:	bf30      	wfi
1a0005b0:	e7fd      	b.n	1a0005ae <Reset_Handler+0x66>
1a0005b2:	bf00      	nop
1a0005b4:	40053100 	.word	0x40053100
1a0005b8:	10df1000 	.word	0x10df1000
1a0005bc:	01dff7ff 	.word	0x01dff7ff
1a0005c0:	e000e280 	.word	0xe000e280
1a0005c4:	1a0000c0 	.word	0x1a0000c0
1a0005c8:	1a0000fc 	.word	0x1a0000fc
1a0005cc:	1a000124 	.word	0x1a000124

1a0005d0 <_fini>:
void _fini(void) {}
1a0005d0:	4770      	bx	lr

1a0005d2 <_init>:
void _init(void) {}
1a0005d2:	4770      	bx	lr

1a0005d4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0005d4:	2200      	movs	r2, #0
1a0005d6:	2a05      	cmp	r2, #5
1a0005d8:	d819      	bhi.n	1a00060e <Board_LED_Init+0x3a>
{
1a0005da:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0005dc:	490c      	ldr	r1, [pc, #48]	; (1a000610 <Board_LED_Init+0x3c>)
1a0005de:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0005e2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0005e6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0005e8:	4b0a      	ldr	r3, [pc, #40]	; (1a000614 <Board_LED_Init+0x40>)
1a0005ea:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0005ee:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0005f2:	2001      	movs	r0, #1
1a0005f4:	40a0      	lsls	r0, r4
1a0005f6:	4301      	orrs	r1, r0
1a0005f8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0005fc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000600:	2100      	movs	r1, #0
1a000602:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000604:	3201      	adds	r2, #1
1a000606:	2a05      	cmp	r2, #5
1a000608:	d9e8      	bls.n	1a0005dc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00060a:	bc70      	pop	{r4, r5, r6}
1a00060c:	4770      	bx	lr
1a00060e:	4770      	bx	lr
1a000610:	1a001bf4 	.word	0x1a001bf4
1a000614:	400f4000 	.word	0x400f4000

1a000618 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000618:	2300      	movs	r3, #0
1a00061a:	2b03      	cmp	r3, #3
1a00061c:	d816      	bhi.n	1a00064c <Board_TEC_Init+0x34>
{
1a00061e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000620:	490b      	ldr	r1, [pc, #44]	; (1a000650 <Board_TEC_Init+0x38>)
1a000622:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000626:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00062a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00062c:	4c09      	ldr	r4, [pc, #36]	; (1a000654 <Board_TEC_Init+0x3c>)
1a00062e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000632:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000636:	2001      	movs	r0, #1
1a000638:	40a8      	lsls	r0, r5
1a00063a:	ea21 0100 	bic.w	r1, r1, r0
1a00063e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000642:	3301      	adds	r3, #1
1a000644:	2b03      	cmp	r3, #3
1a000646:	d9eb      	bls.n	1a000620 <Board_TEC_Init+0x8>
   }
}
1a000648:	bc30      	pop	{r4, r5}
1a00064a:	4770      	bx	lr
1a00064c:	4770      	bx	lr
1a00064e:	bf00      	nop
1a000650:	1a001bec 	.word	0x1a001bec
1a000654:	400f4000 	.word	0x400f4000

1a000658 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000658:	2300      	movs	r3, #0
1a00065a:	2b08      	cmp	r3, #8
1a00065c:	d816      	bhi.n	1a00068c <Board_GPIO_Init+0x34>
{
1a00065e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000660:	490b      	ldr	r1, [pc, #44]	; (1a000690 <Board_GPIO_Init+0x38>)
1a000662:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000666:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00066a:	784d      	ldrb	r5, [r1, #1]
1a00066c:	4c09      	ldr	r4, [pc, #36]	; (1a000694 <Board_GPIO_Init+0x3c>)
1a00066e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000672:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000676:	2001      	movs	r0, #1
1a000678:	40a8      	lsls	r0, r5
1a00067a:	ea21 0100 	bic.w	r1, r1, r0
1a00067e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000682:	3301      	adds	r3, #1
1a000684:	2b08      	cmp	r3, #8
1a000686:	d9eb      	bls.n	1a000660 <Board_GPIO_Init+0x8>
   }
}
1a000688:	bc30      	pop	{r4, r5}
1a00068a:	4770      	bx	lr
1a00068c:	4770      	bx	lr
1a00068e:	bf00      	nop
1a000690:	1a001c00 	.word	0x1a001c00
1a000694:	400f4000 	.word	0x400f4000

1a000698 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000698:	b510      	push	{r4, lr}
1a00069a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00069c:	4c08      	ldr	r4, [pc, #32]	; (1a0006c0 <Board_ADC_Init+0x28>)
1a00069e:	4669      	mov	r1, sp
1a0006a0:	4620      	mov	r0, r4
1a0006a2:	f000 f9d5 	bl	1a000a50 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0006a6:	4a07      	ldr	r2, [pc, #28]	; (1a0006c4 <Board_ADC_Init+0x2c>)
1a0006a8:	4669      	mov	r1, sp
1a0006aa:	4620      	mov	r0, r4
1a0006ac:	f000 f9f0 	bl	1a000a90 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0006b0:	2200      	movs	r2, #0
1a0006b2:	4669      	mov	r1, sp
1a0006b4:	4620      	mov	r0, r4
1a0006b6:	f000 fa04 	bl	1a000ac2 <Chip_ADC_SetResolution>
}
1a0006ba:	b002      	add	sp, #8
1a0006bc:	bd10      	pop	{r4, pc}
1a0006be:	bf00      	nop
1a0006c0:	400e3000 	.word	0x400e3000
1a0006c4:	00061a80 	.word	0x00061a80

1a0006c8 <Board_SPI_Init>:
{
1a0006c8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0006ca:	4c0b      	ldr	r4, [pc, #44]	; (1a0006f8 <Board_SPI_Init+0x30>)
1a0006cc:	4620      	mov	r0, r4
1a0006ce:	f000 fdbb 	bl	1a001248 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0006d2:	6863      	ldr	r3, [r4, #4]
1a0006d4:	f023 0304 	bic.w	r3, r3, #4
1a0006d8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0006da:	6823      	ldr	r3, [r4, #0]
1a0006dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0006e0:	f043 0307 	orr.w	r3, r3, #7
1a0006e4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0006e6:	4905      	ldr	r1, [pc, #20]	; (1a0006fc <Board_SPI_Init+0x34>)
1a0006e8:	4620      	mov	r0, r4
1a0006ea:	f000 fd8e 	bl	1a00120a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0006ee:	6863      	ldr	r3, [r4, #4]
1a0006f0:	f043 0302 	orr.w	r3, r3, #2
1a0006f4:	6063      	str	r3, [r4, #4]
}
1a0006f6:	bd10      	pop	{r4, pc}
1a0006f8:	400c5000 	.word	0x400c5000
1a0006fc:	000186a0 	.word	0x000186a0

1a000700 <Board_I2C_Init>:
{
1a000700:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000702:	2000      	movs	r0, #0
1a000704:	f000 f8a4 	bl	1a000850 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000708:	4b04      	ldr	r3, [pc, #16]	; (1a00071c <Board_I2C_Init+0x1c>)
1a00070a:	f640 0208 	movw	r2, #2056	; 0x808
1a00070e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000712:	4903      	ldr	r1, [pc, #12]	; (1a000720 <Board_I2C_Init+0x20>)
1a000714:	2000      	movs	r0, #0
1a000716:	f000 f8ad 	bl	1a000874 <Chip_I2C_SetClockRate>
}
1a00071a:	bd08      	pop	{r3, pc}
1a00071c:	40086000 	.word	0x40086000
1a000720:	000f4240 	.word	0x000f4240

1a000724 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000724:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000726:	4c07      	ldr	r4, [pc, #28]	; (1a000744 <Board_Debug_Init+0x20>)
1a000728:	4620      	mov	r0, r4
1a00072a:	f000 f8d5 	bl	1a0008d8 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00072e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000732:	4620      	mov	r0, r4
1a000734:	f000 f8fa 	bl	1a00092c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000738:	2303      	movs	r3, #3
1a00073a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00073c:	2301      	movs	r3, #1
1a00073e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000740:	bd10      	pop	{r4, pc}
1a000742:	bf00      	nop
1a000744:	400c1000 	.word	0x400c1000

1a000748 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000748:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00074a:	f7ff ffeb 	bl	1a000724 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00074e:	4809      	ldr	r0, [pc, #36]	; (1a000774 <Board_Init+0x2c>)
1a000750:	f000 fd3a 	bl	1a0011c8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000754:	f7ff ff80 	bl	1a000658 <Board_GPIO_Init>
   Board_ADC_Init();
1a000758:	f7ff ff9e 	bl	1a000698 <Board_ADC_Init>
   Board_SPI_Init();
1a00075c:	f7ff ffb4 	bl	1a0006c8 <Board_SPI_Init>
   Board_I2C_Init();
1a000760:	f7ff ffce 	bl	1a000700 <Board_I2C_Init>

   Board_LED_Init();
1a000764:	f7ff ff36 	bl	1a0005d4 <Board_LED_Init>
   Board_TEC_Init();
1a000768:	f7ff ff56 	bl	1a000618 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00076c:	f000 fc76 	bl	1a00105c <SystemCoreClockUpdate>
}
1a000770:	bd08      	pop	{r3, pc}
1a000772:	bf00      	nop
1a000774:	400f4000 	.word	0x400f4000

1a000778 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000778:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00077a:	f7ff ffd3 	bl	1a000724 <Board_Debug_Init>
1a00077e:	bd08      	pop	{r3, pc}

1a000780 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000780:	2300      	movs	r3, #0
1a000782:	2b1c      	cmp	r3, #28
1a000784:	d812      	bhi.n	1a0007ac <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000786:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000788:	4a09      	ldr	r2, [pc, #36]	; (1a0007b0 <Board_SetupMuxing+0x30>)
1a00078a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00078e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000792:	784a      	ldrb	r2, [r1, #1]
1a000794:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000796:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00079a:	4906      	ldr	r1, [pc, #24]	; (1a0007b4 <Board_SetupMuxing+0x34>)
1a00079c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0007a0:	3301      	adds	r3, #1
1a0007a2:	2b1c      	cmp	r3, #28
1a0007a4:	d9f0      	bls.n	1a000788 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0007a6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0007aa:	4770      	bx	lr
1a0007ac:	4770      	bx	lr
1a0007ae:	bf00      	nop
1a0007b0:	1a001c1c 	.word	0x1a001c1c
1a0007b4:	40086000 	.word	0x40086000

1a0007b8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0007b8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0007ba:	4a17      	ldr	r2, [pc, #92]	; (1a000818 <Board_SetupClocking+0x60>)
1a0007bc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0007c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0007c4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0007c8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0007cc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0007d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0007d4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0007d8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0007dc:	2201      	movs	r2, #1
1a0007de:	490f      	ldr	r1, [pc, #60]	; (1a00081c <Board_SetupClocking+0x64>)
1a0007e0:	2006      	movs	r0, #6
1a0007e2:	f000 fc45 	bl	1a001070 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0007e6:	2400      	movs	r4, #0
1a0007e8:	b14c      	cbz	r4, 1a0007fe <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0007ea:	4b0b      	ldr	r3, [pc, #44]	; (1a000818 <Board_SetupClocking+0x60>)
1a0007ec:	685a      	ldr	r2, [r3, #4]
1a0007ee:	f022 020c 	bic.w	r2, r2, #12
1a0007f2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0007f4:	685a      	ldr	r2, [r3, #4]
1a0007f6:	f042 0203 	orr.w	r2, r2, #3
1a0007fa:	605a      	str	r2, [r3, #4]
}
1a0007fc:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0007fe:	4808      	ldr	r0, [pc, #32]	; (1a000820 <Board_SetupClocking+0x68>)
1a000800:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000804:	2301      	movs	r3, #1
1a000806:	788a      	ldrb	r2, [r1, #2]
1a000808:	7849      	ldrb	r1, [r1, #1]
1a00080a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00080e:	f000 fb81 	bl	1a000f14 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000812:	3401      	adds	r4, #1
1a000814:	e7e8      	b.n	1a0007e8 <Board_SetupClocking+0x30>
1a000816:	bf00      	nop
1a000818:	40043000 	.word	0x40043000
1a00081c:	0c28cb00 	.word	0x0c28cb00
1a000820:	1a001c18 	.word	0x1a001c18

1a000824 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000824:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000826:	f7ff ffab 	bl	1a000780 <Board_SetupMuxing>
    Board_SetupClocking();
1a00082a:	f7ff ffc5 	bl	1a0007b8 <Board_SetupClocking>
}
1a00082e:	bd08      	pop	{r3, pc}

1a000830 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000830:	2901      	cmp	r1, #1
1a000832:	d109      	bne.n	1a000848 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000834:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000838:	0082      	lsls	r2, r0, #2
1a00083a:	4b04      	ldr	r3, [pc, #16]	; (1a00084c <Chip_I2C_EventHandler+0x1c>)
1a00083c:	4413      	add	r3, r2
1a00083e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000840:	7d13      	ldrb	r3, [r2, #20]
1a000842:	b2db      	uxtb	r3, r3
1a000844:	2b04      	cmp	r3, #4
1a000846:	d0fb      	beq.n	1a000840 <Chip_I2C_EventHandler+0x10>
}
1a000848:	4770      	bx	lr
1a00084a:	bf00      	nop
1a00084c:	10000000 	.word	0x10000000

1a000850 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000850:	b570      	push	{r4, r5, r6, lr}
1a000852:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000854:	4e06      	ldr	r6, [pc, #24]	; (1a000870 <Chip_I2C_Init+0x20>)
1a000856:	00c4      	lsls	r4, r0, #3
1a000858:	1a22      	subs	r2, r4, r0
1a00085a:	0093      	lsls	r3, r2, #2
1a00085c:	4433      	add	r3, r6
1a00085e:	8898      	ldrh	r0, [r3, #4]
1a000860:	f000 fbbc 	bl	1a000fdc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000864:	1b64      	subs	r4, r4, r5
1a000866:	00a3      	lsls	r3, r4, #2
1a000868:	58f3      	ldr	r3, [r6, r3]
1a00086a:	226c      	movs	r2, #108	; 0x6c
1a00086c:	619a      	str	r2, [r3, #24]
}
1a00086e:	bd70      	pop	{r4, r5, r6, pc}
1a000870:	10000000 	.word	0x10000000

1a000874 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000878:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00087a:	4e0b      	ldr	r6, [pc, #44]	; (1a0008a8 <Chip_I2C_SetClockRate+0x34>)
1a00087c:	00c5      	lsls	r5, r0, #3
1a00087e:	1a2b      	subs	r3, r5, r0
1a000880:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000884:	eb06 0308 	add.w	r3, r6, r8
1a000888:	8898      	ldrh	r0, [r3, #4]
1a00088a:	f000 fbc1 	bl	1a001010 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00088e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000892:	f856 3008 	ldr.w	r3, [r6, r8]
1a000896:	0842      	lsrs	r2, r0, #1
1a000898:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00089a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00089e:	691a      	ldr	r2, [r3, #16]
1a0008a0:	1a80      	subs	r0, r0, r2
1a0008a2:	6158      	str	r0, [r3, #20]
}
1a0008a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0008a8:	10000000 	.word	0x10000000

1a0008ac <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0008ac:	4b09      	ldr	r3, [pc, #36]	; (1a0008d4 <Chip_UART_GetIndex+0x28>)
1a0008ae:	4298      	cmp	r0, r3
1a0008b0:	d009      	beq.n	1a0008c6 <Chip_UART_GetIndex+0x1a>
1a0008b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0008b6:	4298      	cmp	r0, r3
1a0008b8:	d007      	beq.n	1a0008ca <Chip_UART_GetIndex+0x1e>
1a0008ba:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0008be:	4298      	cmp	r0, r3
1a0008c0:	d005      	beq.n	1a0008ce <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0008c2:	2000      	movs	r0, #0
1a0008c4:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0008c6:	2002      	movs	r0, #2
1a0008c8:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0008ca:	2003      	movs	r0, #3
1a0008cc:	4770      	bx	lr
			return 1;
1a0008ce:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0008d0:	4770      	bx	lr
1a0008d2:	bf00      	nop
1a0008d4:	400c1000 	.word	0x400c1000

1a0008d8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0008d8:	b530      	push	{r4, r5, lr}
1a0008da:	b083      	sub	sp, #12
1a0008dc:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0008de:	f7ff ffe5 	bl	1a0008ac <Chip_UART_GetIndex>
1a0008e2:	2301      	movs	r3, #1
1a0008e4:	461a      	mov	r2, r3
1a0008e6:	4619      	mov	r1, r3
1a0008e8:	4d0e      	ldr	r5, [pc, #56]	; (1a000924 <Chip_UART_Init+0x4c>)
1a0008ea:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0008ee:	f000 fb57 	bl	1a000fa0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0008f2:	2307      	movs	r3, #7
1a0008f4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0008f6:	2300      	movs	r3, #0
1a0008f8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0008fa:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0008fc:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0008fe:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000900:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000902:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000904:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000906:	4b08      	ldr	r3, [pc, #32]	; (1a000928 <Chip_UART_Init+0x50>)
1a000908:	429c      	cmp	r4, r3
1a00090a:	d006      	beq.n	1a00091a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00090c:	2303      	movs	r3, #3
1a00090e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000910:	2310      	movs	r3, #16
1a000912:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000914:	9b01      	ldr	r3, [sp, #4]
}
1a000916:	b003      	add	sp, #12
1a000918:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00091a:	2300      	movs	r3, #0
1a00091c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00091e:	69a3      	ldr	r3, [r4, #24]
1a000920:	9301      	str	r3, [sp, #4]
1a000922:	e7f3      	b.n	1a00090c <Chip_UART_Init+0x34>
1a000924:	1a001c98 	.word	0x1a001c98
1a000928:	40082000 	.word	0x40082000

1a00092c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00092c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000930:	b083      	sub	sp, #12
1a000932:	9001      	str	r0, [sp, #4]
1a000934:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000936:	f7ff ffb9 	bl	1a0008ac <Chip_UART_GetIndex>
1a00093a:	4b32      	ldr	r3, [pc, #200]	; (1a000a04 <Chip_UART_SetBaudFDR+0xd8>)
1a00093c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000940:	f000 fb66 	bl	1a001010 <Chip_Clock_GetRate>
1a000944:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000946:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00094a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00094c:	f04f 0b00 	mov.w	fp, #0
1a000950:	46a2      	mov	sl, r4
1a000952:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000954:	e02a      	b.n	1a0009ac <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000956:	4242      	negs	r2, r0
				div ++;
1a000958:	1c4b      	adds	r3, r1, #1
1a00095a:	e017      	b.n	1a00098c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00095c:	b30a      	cbz	r2, 1a0009a2 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00095e:	4617      	mov	r7, r2
			sd = d;
1a000960:	46ab      	mov	fp, r5
			sm = m;
1a000962:	46a2      	mov	sl, r4
			sdiv = div;
1a000964:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000966:	3501      	adds	r5, #1
1a000968:	42ac      	cmp	r4, r5
1a00096a:	d91e      	bls.n	1a0009aa <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00096c:	0933      	lsrs	r3, r6, #4
1a00096e:	0730      	lsls	r0, r6, #28
1a000970:	fba4 0100 	umull	r0, r1, r4, r0
1a000974:	fb04 1103 	mla	r1, r4, r3, r1
1a000978:	1962      	adds	r2, r4, r5
1a00097a:	fb08 f202 	mul.w	r2, r8, r2
1a00097e:	2300      	movs	r3, #0
1a000980:	f000 ff7c 	bl	1a00187c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000984:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000986:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000988:	2800      	cmp	r0, #0
1a00098a:	dbe4      	blt.n	1a000956 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00098c:	4297      	cmp	r7, r2
1a00098e:	d3ea      	bcc.n	1a000966 <Chip_UART_SetBaudFDR+0x3a>
1a000990:	2b00      	cmp	r3, #0
1a000992:	d0e8      	beq.n	1a000966 <Chip_UART_SetBaudFDR+0x3a>
1a000994:	0c19      	lsrs	r1, r3, #16
1a000996:	d1e6      	bne.n	1a000966 <Chip_UART_SetBaudFDR+0x3a>
1a000998:	2b02      	cmp	r3, #2
1a00099a:	d8df      	bhi.n	1a00095c <Chip_UART_SetBaudFDR+0x30>
1a00099c:	2d00      	cmp	r5, #0
1a00099e:	d0dd      	beq.n	1a00095c <Chip_UART_SetBaudFDR+0x30>
1a0009a0:	e7e1      	b.n	1a000966 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0009a2:	4617      	mov	r7, r2
			sd = d;
1a0009a4:	46ab      	mov	fp, r5
			sm = m;
1a0009a6:	46a2      	mov	sl, r4
			sdiv = div;
1a0009a8:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0009aa:	3401      	adds	r4, #1
1a0009ac:	b11f      	cbz	r7, 1a0009b6 <Chip_UART_SetBaudFDR+0x8a>
1a0009ae:	2c0f      	cmp	r4, #15
1a0009b0:	d801      	bhi.n	1a0009b6 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0009b2:	2500      	movs	r5, #0
1a0009b4:	e7d8      	b.n	1a000968 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0009b6:	f1b9 0f00 	cmp.w	r9, #0
1a0009ba:	d01e      	beq.n	1a0009fa <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0009bc:	9a01      	ldr	r2, [sp, #4]
1a0009be:	4611      	mov	r1, r2
1a0009c0:	68d3      	ldr	r3, [r2, #12]
1a0009c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0009c6:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0009c8:	fa5f f389 	uxtb.w	r3, r9
1a0009cc:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0009ce:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0009d2:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0009d4:	68d3      	ldr	r3, [r2, #12]
1a0009d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0009da:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0009dc:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0009e0:	b2db      	uxtb	r3, r3
1a0009e2:	f00b 020f 	and.w	r2, fp, #15
1a0009e6:	4313      	orrs	r3, r2
1a0009e8:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0009ea:	0933      	lsrs	r3, r6, #4
1a0009ec:	fb0a f303 	mul.w	r3, sl, r3
1a0009f0:	44da      	add	sl, fp
1a0009f2:	fb09 f90a 	mul.w	r9, r9, sl
1a0009f6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0009fa:	4648      	mov	r0, r9
1a0009fc:	b003      	add	sp, #12
1a0009fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000a02:	bf00      	nop
1a000a04:	1a001c90 	.word	0x1a001c90

1a000a08 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000a08:	4b03      	ldr	r3, [pc, #12]	; (1a000a18 <Chip_ADC_GetClockIndex+0x10>)
1a000a0a:	4298      	cmp	r0, r3
1a000a0c:	d001      	beq.n	1a000a12 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000a0e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000a10:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000a12:	2004      	movs	r0, #4
1a000a14:	4770      	bx	lr
1a000a16:	bf00      	nop
1a000a18:	400e4000 	.word	0x400e4000

1a000a1c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000a1c:	b570      	push	{r4, r5, r6, lr}
1a000a1e:	460d      	mov	r5, r1
1a000a20:	4614      	mov	r4, r2
1a000a22:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000a24:	f7ff fff0 	bl	1a000a08 <Chip_ADC_GetClockIndex>
1a000a28:	f000 faf2 	bl	1a001010 <Chip_Clock_GetRate>
	if (burstMode) {
1a000a2c:	b155      	cbz	r5, 1a000a44 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000a2e:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000a32:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000a36:	0064      	lsls	r4, r4, #1
1a000a38:	fbb0 f0f4 	udiv	r0, r0, r4
1a000a3c:	b2c0      	uxtb	r0, r0
1a000a3e:	3801      	subs	r0, #1
	return div;
}
1a000a40:	b2c0      	uxtb	r0, r0
1a000a42:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000a44:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000a48:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000a4c:	e7f1      	b.n	1a000a32 <getClkDiv+0x16>
1a000a4e:	Address 0x000000001a000a4e is out of bounds.


1a000a50 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000a50:	b538      	push	{r3, r4, r5, lr}
1a000a52:	4605      	mov	r5, r0
1a000a54:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000a56:	f7ff ffd7 	bl	1a000a08 <Chip_ADC_GetClockIndex>
1a000a5a:	2301      	movs	r3, #1
1a000a5c:	461a      	mov	r2, r3
1a000a5e:	4619      	mov	r1, r3
1a000a60:	f000 fa9e 	bl	1a000fa0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000a64:	2100      	movs	r1, #0
1a000a66:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000a68:	4a08      	ldr	r2, [pc, #32]	; (1a000a8c <Chip_ADC_Init+0x3c>)
1a000a6a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000a6c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000a6e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000a70:	230b      	movs	r3, #11
1a000a72:	4628      	mov	r0, r5
1a000a74:	f7ff ffd2 	bl	1a000a1c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000a78:	0200      	lsls	r0, r0, #8
1a000a7a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000a7e:	7920      	ldrb	r0, [r4, #4]
1a000a80:	0440      	lsls	r0, r0, #17
1a000a82:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000a86:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000a88:	6028      	str	r0, [r5, #0]
}
1a000a8a:	bd38      	pop	{r3, r4, r5, pc}
1a000a8c:	00061a80 	.word	0x00061a80

1a000a90 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000a90:	b570      	push	{r4, r5, r6, lr}
1a000a92:	4605      	mov	r5, r0
1a000a94:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000a96:	6804      	ldr	r4, [r0, #0]
1a000a98:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000a9c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000aa0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000aa2:	790b      	ldrb	r3, [r1, #4]
1a000aa4:	f1c3 030b 	rsb	r3, r3, #11
1a000aa8:	b2db      	uxtb	r3, r3
1a000aaa:	7949      	ldrb	r1, [r1, #5]
1a000aac:	f7ff ffb6 	bl	1a000a1c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000ab0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000ab4:	7933      	ldrb	r3, [r6, #4]
1a000ab6:	045b      	lsls	r3, r3, #17
1a000ab8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000abc:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000abe:	602b      	str	r3, [r5, #0]
}
1a000ac0:	bd70      	pop	{r4, r5, r6, pc}

1a000ac2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000ac2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000ac4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000ac6:	680a      	ldr	r2, [r1, #0]
1a000ac8:	f7ff ffe2 	bl	1a000a90 <Chip_ADC_SetSampleRate>
}
1a000acc:	bd08      	pop	{r3, pc}
1a000ace:	Address 0x000000001a000ace is out of bounds.


1a000ad0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ad0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000ad2:	680b      	ldr	r3, [r1, #0]
1a000ad4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ad8:	d002      	beq.n	1a000ae0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ade:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000ae0:	4607      	mov	r7, r0
1a000ae2:	2501      	movs	r5, #1
1a000ae4:	e03a      	b.n	1a000b5c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000ae6:	694b      	ldr	r3, [r1, #20]
1a000ae8:	fb03 f302 	mul.w	r3, r3, r2
1a000aec:	fbb3 f3f5 	udiv	r3, r3, r5
1a000af0:	e01c      	b.n	1a000b2c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000af2:	461c      	mov	r4, r3
	if (val < 0)
1a000af4:	ebb0 0c04 	subs.w	ip, r0, r4
1a000af8:	d427      	bmi.n	1a000b4a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000afa:	4567      	cmp	r7, ip
1a000afc:	d906      	bls.n	1a000b0c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000afe:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000b00:	1c77      	adds	r7, r6, #1
1a000b02:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000b04:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000b06:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000b08:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000b0a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000b0c:	3201      	adds	r2, #1
1a000b0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000b12:	dc1d      	bgt.n	1a000b50 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000b14:	680c      	ldr	r4, [r1, #0]
1a000b16:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000b1a:	d0e4      	beq.n	1a000ae6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000b1c:	1c73      	adds	r3, r6, #1
1a000b1e:	fa02 fc03 	lsl.w	ip, r2, r3
1a000b22:	694b      	ldr	r3, [r1, #20]
1a000b24:	fb03 f30c 	mul.w	r3, r3, ip
1a000b28:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b2c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000b68 <pll_calc_divs+0x98>
1a000b30:	4563      	cmp	r3, ip
1a000b32:	d9eb      	bls.n	1a000b0c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b34:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000b6c <pll_calc_divs+0x9c>
1a000b38:	4563      	cmp	r3, ip
1a000b3a:	d809      	bhi.n	1a000b50 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000b3c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b40:	d1d7      	bne.n	1a000af2 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000b42:	1c74      	adds	r4, r6, #1
1a000b44:	fa23 f404 	lsr.w	r4, r3, r4
1a000b48:	e7d4      	b.n	1a000af4 <pll_calc_divs+0x24>
		return -val;
1a000b4a:	f1cc 0c00 	rsb	ip, ip, #0
1a000b4e:	e7d4      	b.n	1a000afa <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000b50:	3601      	adds	r6, #1
1a000b52:	2e03      	cmp	r6, #3
1a000b54:	dc01      	bgt.n	1a000b5a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000b56:	2201      	movs	r2, #1
1a000b58:	e7d9      	b.n	1a000b0e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000b5a:	3501      	adds	r5, #1
1a000b5c:	2d04      	cmp	r5, #4
1a000b5e:	dc01      	bgt.n	1a000b64 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000b60:	2600      	movs	r6, #0
1a000b62:	e7f6      	b.n	1a000b52 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000b64:	bcf0      	pop	{r4, r5, r6, r7}
1a000b66:	4770      	bx	lr
1a000b68:	094c5eff 	.word	0x094c5eff
1a000b6c:	1312d000 	.word	0x1312d000

1a000b70 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b72:	b099      	sub	sp, #100	; 0x64
1a000b74:	4605      	mov	r5, r0
1a000b76:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000b78:	225c      	movs	r2, #92	; 0x5c
1a000b7a:	2100      	movs	r1, #0
1a000b7c:	a801      	add	r0, sp, #4
1a000b7e:	f001 f823 	bl	1a001bc8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000b82:	2380      	movs	r3, #128	; 0x80
1a000b84:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000b86:	6963      	ldr	r3, [r4, #20]
1a000b88:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000b8a:	7923      	ldrb	r3, [r4, #4]
1a000b8c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000b90:	4669      	mov	r1, sp
1a000b92:	4628      	mov	r0, r5
1a000b94:	f7ff ff9c 	bl	1a000ad0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000b98:	9b06      	ldr	r3, [sp, #24]
1a000b9a:	42ab      	cmp	r3, r5
1a000b9c:	d027      	beq.n	1a000bee <pll_get_frac+0x7e>
	if (val < 0)
1a000b9e:	1aeb      	subs	r3, r5, r3
1a000ba0:	d42e      	bmi.n	1a000c00 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000ba2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000baa:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000bac:	6963      	ldr	r3, [r4, #20]
1a000bae:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000bb0:	7923      	ldrb	r3, [r4, #4]
1a000bb2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000bb6:	a910      	add	r1, sp, #64	; 0x40
1a000bb8:	4628      	mov	r0, r5
1a000bba:	f7ff ff89 	bl	1a000ad0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000bbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000bc0:	42ab      	cmp	r3, r5
1a000bc2:	d01f      	beq.n	1a000c04 <pll_get_frac+0x94>
	if (val < 0)
1a000bc4:	1aeb      	subs	r3, r5, r3
1a000bc6:	d425      	bmi.n	1a000c14 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000bc8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000bca:	4b2b      	ldr	r3, [pc, #172]	; (1a000c78 <pll_get_frac+0x108>)
1a000bcc:	429d      	cmp	r5, r3
1a000bce:	d923      	bls.n	1a000c18 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000bd2:	1aed      	subs	r5, r5, r3
1a000bd4:	d433      	bmi.n	1a000c3e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000bd6:	42ae      	cmp	r6, r5
1a000bd8:	dc3b      	bgt.n	1a000c52 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000bda:	42be      	cmp	r6, r7
1a000bdc:	dc31      	bgt.n	1a000c42 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000bde:	466d      	mov	r5, sp
1a000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000be4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bec:	e006      	b.n	1a000bfc <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000bee:	466d      	mov	r5, sp
1a000bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000bfc:	b019      	add	sp, #100	; 0x64
1a000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000c00:	425b      	negs	r3, r3
1a000c02:	e7ce      	b.n	1a000ba2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000c04:	ad10      	add	r5, sp, #64	; 0x40
1a000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000c12:	e7f3      	b.n	1a000bfc <pll_get_frac+0x8c>
		return -val;
1a000c14:	425b      	negs	r3, r3
1a000c16:	e7d7      	b.n	1a000bc8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000c18:	2340      	movs	r3, #64	; 0x40
1a000c1a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000c1c:	6963      	ldr	r3, [r4, #20]
1a000c1e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000c20:	a908      	add	r1, sp, #32
1a000c22:	4628      	mov	r0, r5
1a000c24:	f7ff ff54 	bl	1a000ad0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000c2a:	42ab      	cmp	r3, r5
1a000c2c:	d1d0      	bne.n	1a000bd0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000c2e:	ad08      	add	r5, sp, #32
1a000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000c3c:	e7de      	b.n	1a000bfc <pll_get_frac+0x8c>
		return -val;
1a000c3e:	426d      	negs	r5, r5
1a000c40:	e7c9      	b.n	1a000bd6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000c42:	ad10      	add	r5, sp, #64	; 0x40
1a000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c50:	e7d4      	b.n	1a000bfc <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000c52:	42af      	cmp	r7, r5
1a000c54:	db07      	blt.n	1a000c66 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000c56:	ad08      	add	r5, sp, #32
1a000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c64:	e7ca      	b.n	1a000bfc <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000c66:	ad10      	add	r5, sp, #64	; 0x40
1a000c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c74:	e7c2      	b.n	1a000bfc <pll_get_frac+0x8c>
1a000c76:	bf00      	nop
1a000c78:	068e7780 	.word	0x068e7780

1a000c7c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000c7c:	b430      	push	{r4, r5}
1a000c7e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000c80:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000c82:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c84:	e000      	b.n	1a000c88 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000c86:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c88:	281c      	cmp	r0, #28
1a000c8a:	d118      	bne.n	1a000cbe <Chip_Clock_FindBaseClock+0x42>
1a000c8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000c90:	0051      	lsls	r1, r2, #1
1a000c92:	4a0c      	ldr	r2, [pc, #48]	; (1a000cc4 <Chip_Clock_FindBaseClock+0x48>)
1a000c94:	440a      	add	r2, r1
1a000c96:	7914      	ldrb	r4, [r2, #4]
1a000c98:	4284      	cmp	r4, r0
1a000c9a:	d010      	beq.n	1a000cbe <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000c9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000ca0:	004a      	lsls	r2, r1, #1
1a000ca2:	4908      	ldr	r1, [pc, #32]	; (1a000cc4 <Chip_Clock_FindBaseClock+0x48>)
1a000ca4:	5a8a      	ldrh	r2, [r1, r2]
1a000ca6:	42aa      	cmp	r2, r5
1a000ca8:	d8ed      	bhi.n	1a000c86 <Chip_Clock_FindBaseClock+0xa>
1a000caa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000cae:	0051      	lsls	r1, r2, #1
1a000cb0:	4a04      	ldr	r2, [pc, #16]	; (1a000cc4 <Chip_Clock_FindBaseClock+0x48>)
1a000cb2:	440a      	add	r2, r1
1a000cb4:	8852      	ldrh	r2, [r2, #2]
1a000cb6:	42aa      	cmp	r2, r5
1a000cb8:	d3e5      	bcc.n	1a000c86 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000cba:	4620      	mov	r0, r4
1a000cbc:	e7e4      	b.n	1a000c88 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000cbe:	bc30      	pop	{r4, r5}
1a000cc0:	4770      	bx	lr
1a000cc2:	bf00      	nop
1a000cc4:	1a001cac 	.word	0x1a001cac

1a000cc8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000cc8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000cce:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000cd0:	4a0d      	ldr	r2, [pc, #52]	; (1a000d08 <Chip_Clock_EnableCrystal+0x40>)
1a000cd2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000cd4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000cd8:	6992      	ldr	r2, [r2, #24]
1a000cda:	428a      	cmp	r2, r1
1a000cdc:	d001      	beq.n	1a000ce2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000cde:	4a0a      	ldr	r2, [pc, #40]	; (1a000d08 <Chip_Clock_EnableCrystal+0x40>)
1a000ce0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000ce2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000ce6:	4a09      	ldr	r2, [pc, #36]	; (1a000d0c <Chip_Clock_EnableCrystal+0x44>)
1a000ce8:	6811      	ldr	r1, [r2, #0]
1a000cea:	4a09      	ldr	r2, [pc, #36]	; (1a000d10 <Chip_Clock_EnableCrystal+0x48>)
1a000cec:	4291      	cmp	r1, r2
1a000cee:	d901      	bls.n	1a000cf4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000cf0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000cf4:	4a04      	ldr	r2, [pc, #16]	; (1a000d08 <Chip_Clock_EnableCrystal+0x40>)
1a000cf6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000cf8:	9b01      	ldr	r3, [sp, #4]
1a000cfa:	1e5a      	subs	r2, r3, #1
1a000cfc:	9201      	str	r2, [sp, #4]
1a000cfe:	2b00      	cmp	r3, #0
1a000d00:	d1fa      	bne.n	1a000cf8 <Chip_Clock_EnableCrystal+0x30>
}
1a000d02:	b002      	add	sp, #8
1a000d04:	4770      	bx	lr
1a000d06:	bf00      	nop
1a000d08:	40050000 	.word	0x40050000
1a000d0c:	1a001c14 	.word	0x1a001c14
1a000d10:	01312cff 	.word	0x01312cff

1a000d14 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000d14:	3012      	adds	r0, #18
1a000d16:	4b05      	ldr	r3, [pc, #20]	; (1a000d2c <Chip_Clock_GetDividerSource+0x18>)
1a000d18:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000d1c:	f010 0f01 	tst.w	r0, #1
1a000d20:	d102      	bne.n	1a000d28 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d22:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d26:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d28:	2011      	movs	r0, #17
}
1a000d2a:	4770      	bx	lr
1a000d2c:	40050000 	.word	0x40050000

1a000d30 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000d30:	f100 0212 	add.w	r2, r0, #18
1a000d34:	4b03      	ldr	r3, [pc, #12]	; (1a000d44 <Chip_Clock_GetDividerDivisor+0x14>)
1a000d36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000d3a:	4b03      	ldr	r3, [pc, #12]	; (1a000d48 <Chip_Clock_GetDividerDivisor+0x18>)
1a000d3c:	5c18      	ldrb	r0, [r3, r0]
}
1a000d3e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000d42:	4770      	bx	lr
1a000d44:	40050000 	.word	0x40050000
1a000d48:	1a001ca4 	.word	0x1a001ca4

1a000d4c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000d4c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000d4e:	2810      	cmp	r0, #16
1a000d50:	d80a      	bhi.n	1a000d68 <Chip_Clock_GetClockInputHz+0x1c>
1a000d52:	e8df f000 	tbb	[pc, r0]
1a000d56:	0b44      	.short	0x0b44
1a000d58:	0921180d 	.word	0x0921180d
1a000d5c:	2d2a2724 	.word	0x2d2a2724
1a000d60:	34300909 	.word	0x34300909
1a000d64:	3c38      	.short	0x3c38
1a000d66:	40          	.byte	0x40
1a000d67:	00          	.byte	0x00
	uint32_t rate = 0;
1a000d68:	2000      	movs	r0, #0
1a000d6a:	e03a      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000d6c:	481e      	ldr	r0, [pc, #120]	; (1a000de8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000d6e:	e038      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d70:	4b1e      	ldr	r3, [pc, #120]	; (1a000dec <Chip_Clock_GetClockInputHz+0xa0>)
1a000d72:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d76:	f003 0307 	and.w	r3, r3, #7
1a000d7a:	2b04      	cmp	r3, #4
1a000d7c:	d001      	beq.n	1a000d82 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000d7e:	481c      	ldr	r0, [pc, #112]	; (1a000df0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000d80:	e02f      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000d82:	2000      	movs	r0, #0
1a000d84:	e02d      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d86:	4b19      	ldr	r3, [pc, #100]	; (1a000dec <Chip_Clock_GetClockInputHz+0xa0>)
1a000d88:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d8c:	f003 0307 	and.w	r3, r3, #7
1a000d90:	2b04      	cmp	r3, #4
1a000d92:	d027      	beq.n	1a000de4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000d94:	4816      	ldr	r0, [pc, #88]	; (1a000df0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000d96:	e024      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000d98:	4b16      	ldr	r3, [pc, #88]	; (1a000df4 <Chip_Clock_GetClockInputHz+0xa8>)
1a000d9a:	6818      	ldr	r0, [r3, #0]
		break;
1a000d9c:	e021      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000d9e:	4b16      	ldr	r3, [pc, #88]	; (1a000df8 <Chip_Clock_GetClockInputHz+0xac>)
1a000da0:	6818      	ldr	r0, [r3, #0]
		break;
1a000da2:	e01e      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000da4:	4b15      	ldr	r3, [pc, #84]	; (1a000dfc <Chip_Clock_GetClockInputHz+0xb0>)
1a000da6:	6818      	ldr	r0, [r3, #0]
		break;
1a000da8:	e01b      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000daa:	4b14      	ldr	r3, [pc, #80]	; (1a000dfc <Chip_Clock_GetClockInputHz+0xb0>)
1a000dac:	6858      	ldr	r0, [r3, #4]
		break;
1a000dae:	e018      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000db0:	f000 f868 	bl	1a000e84 <Chip_Clock_GetMainPLLHz>
		break;
1a000db4:	e015      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000db6:	2100      	movs	r1, #0
1a000db8:	f000 f89a 	bl	1a000ef0 <Chip_Clock_GetDivRate>
		break;
1a000dbc:	e011      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000dbe:	2101      	movs	r1, #1
1a000dc0:	f000 f896 	bl	1a000ef0 <Chip_Clock_GetDivRate>
		break;
1a000dc4:	e00d      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000dc6:	2102      	movs	r1, #2
1a000dc8:	f000 f892 	bl	1a000ef0 <Chip_Clock_GetDivRate>
		break;
1a000dcc:	e009      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000dce:	2103      	movs	r1, #3
1a000dd0:	f000 f88e 	bl	1a000ef0 <Chip_Clock_GetDivRate>
		break;
1a000dd4:	e005      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000dd6:	2104      	movs	r1, #4
1a000dd8:	f000 f88a 	bl	1a000ef0 <Chip_Clock_GetDivRate>
		break;
1a000ddc:	e001      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000dde:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000de2:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000de4:	4806      	ldr	r0, [pc, #24]	; (1a000e00 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000de6:	e7fc      	b.n	1a000de2 <Chip_Clock_GetClockInputHz+0x96>
1a000de8:	00b71b00 	.word	0x00b71b00
1a000dec:	40043000 	.word	0x40043000
1a000df0:	017d7840 	.word	0x017d7840
1a000df4:	1a001be8 	.word	0x1a001be8
1a000df8:	1a001c14 	.word	0x1a001c14
1a000dfc:	100000e8 	.word	0x100000e8
1a000e00:	02faf080 	.word	0x02faf080

1a000e04 <Chip_Clock_CalcMainPLLValue>:
{
1a000e04:	b538      	push	{r3, r4, r5, lr}
1a000e06:	4605      	mov	r5, r0
1a000e08:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000e0a:	7908      	ldrb	r0, [r1, #4]
1a000e0c:	f7ff ff9e 	bl	1a000d4c <Chip_Clock_GetClockInputHz>
1a000e10:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000e12:	4b19      	ldr	r3, [pc, #100]	; (1a000e78 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000e14:	442b      	add	r3, r5
1a000e16:	4a19      	ldr	r2, [pc, #100]	; (1a000e7c <Chip_Clock_CalcMainPLLValue+0x78>)
1a000e18:	4293      	cmp	r3, r2
1a000e1a:	d821      	bhi.n	1a000e60 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000e1c:	b318      	cbz	r0, 1a000e66 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000e1e:	2380      	movs	r3, #128	; 0x80
1a000e20:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000e22:	2300      	movs	r3, #0
1a000e24:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000e26:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000e28:	fbb5 f3f0 	udiv	r3, r5, r0
1a000e2c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000e2e:	4a14      	ldr	r2, [pc, #80]	; (1a000e80 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000e30:	4295      	cmp	r5, r2
1a000e32:	d903      	bls.n	1a000e3c <Chip_Clock_CalcMainPLLValue+0x38>
1a000e34:	fb03 f000 	mul.w	r0, r3, r0
1a000e38:	42a8      	cmp	r0, r5
1a000e3a:	d007      	beq.n	1a000e4c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000e3c:	4621      	mov	r1, r4
1a000e3e:	4628      	mov	r0, r5
1a000e40:	f7ff fe96 	bl	1a000b70 <pll_get_frac>
		if (!ppll->nsel) {
1a000e44:	68a3      	ldr	r3, [r4, #8]
1a000e46:	b18b      	cbz	r3, 1a000e6c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000e48:	3b01      	subs	r3, #1
1a000e4a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000e4c:	6923      	ldr	r3, [r4, #16]
1a000e4e:	b183      	cbz	r3, 1a000e72 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000e50:	68e2      	ldr	r2, [r4, #12]
1a000e52:	b10a      	cbz	r2, 1a000e58 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000e54:	3a01      	subs	r2, #1
1a000e56:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000e58:	3b01      	subs	r3, #1
1a000e5a:	6123      	str	r3, [r4, #16]
	return 0;
1a000e5c:	2000      	movs	r0, #0
}
1a000e5e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e64:	e7fb      	b.n	1a000e5e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000e66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e6a:	e7f8      	b.n	1a000e5e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e70:	e7f5      	b.n	1a000e5e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e76:	e7f2      	b.n	1a000e5e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000e78:	ff6b3a10 	.word	0xff6b3a10
1a000e7c:	0b940510 	.word	0x0b940510
1a000e80:	094c5eff 	.word	0x094c5eff

1a000e84 <Chip_Clock_GetMainPLLHz>:
{
1a000e84:	b530      	push	{r4, r5, lr}
1a000e86:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000e88:	4d17      	ldr	r5, [pc, #92]	; (1a000ee8 <Chip_Clock_GetMainPLLHz+0x64>)
1a000e8a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000e8c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000e90:	f7ff ff5c 	bl	1a000d4c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000e94:	4b15      	ldr	r3, [pc, #84]	; (1a000eec <Chip_Clock_GetMainPLLHz+0x68>)
1a000e96:	681b      	ldr	r3, [r3, #0]
1a000e98:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000e9a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000e9c:	f013 0f01 	tst.w	r3, #1
1a000ea0:	d020      	beq.n	1a000ee4 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000ea2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000ea6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000eaa:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000eae:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000eb2:	3301      	adds	r3, #1
	n = nsel + 1;
1a000eb4:	3201      	adds	r2, #1
	p = ptab[psel];
1a000eb6:	f10d 0c08 	add.w	ip, sp, #8
1a000eba:	4461      	add	r1, ip
1a000ebc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000ec0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000ec4:	d108      	bne.n	1a000ed8 <Chip_Clock_GetMainPLLHz+0x54>
1a000ec6:	b93d      	cbnz	r5, 1a000ed8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000ec8:	0049      	lsls	r1, r1, #1
1a000eca:	fbb3 f3f1 	udiv	r3, r3, r1
1a000ece:	fbb0 f0f2 	udiv	r0, r0, r2
1a000ed2:	fb00 f003 	mul.w	r0, r0, r3
1a000ed6:	e003      	b.n	1a000ee0 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000ed8:	fbb0 f0f2 	udiv	r0, r0, r2
1a000edc:	fb03 f000 	mul.w	r0, r3, r0
}
1a000ee0:	b003      	add	sp, #12
1a000ee2:	bd30      	pop	{r4, r5, pc}
		return 0;
1a000ee4:	2000      	movs	r0, #0
1a000ee6:	e7fb      	b.n	1a000ee0 <Chip_Clock_GetMainPLLHz+0x5c>
1a000ee8:	40050000 	.word	0x40050000
1a000eec:	1a001ca0 	.word	0x1a001ca0

1a000ef0 <Chip_Clock_GetDivRate>:
{
1a000ef0:	b538      	push	{r3, r4, r5, lr}
1a000ef2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000ef4:	4608      	mov	r0, r1
1a000ef6:	f7ff ff0d 	bl	1a000d14 <Chip_Clock_GetDividerSource>
1a000efa:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000efc:	4620      	mov	r0, r4
1a000efe:	f7ff ff17 	bl	1a000d30 <Chip_Clock_GetDividerDivisor>
1a000f02:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000f04:	4628      	mov	r0, r5
1a000f06:	f7ff ff21 	bl	1a000d4c <Chip_Clock_GetClockInputHz>
1a000f0a:	3401      	adds	r4, #1
}
1a000f0c:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f10:	bd38      	pop	{r3, r4, r5, pc}
1a000f12:	Address 0x000000001a000f12 is out of bounds.


1a000f14 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000f14:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f16:	f100 0416 	add.w	r4, r0, #22
1a000f1a:	00a4      	lsls	r4, r4, #2
1a000f1c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000f20:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000f24:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000f26:	281b      	cmp	r0, #27
1a000f28:	d813      	bhi.n	1a000f52 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000f2a:	2911      	cmp	r1, #17
1a000f2c:	d01a      	beq.n	1a000f64 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000f2e:	4d0e      	ldr	r5, [pc, #56]	; (1a000f68 <Chip_Clock_SetBaseClock+0x54>)
1a000f30:	4025      	ands	r5, r4

			if (autoblocken) {
1a000f32:	b10a      	cbz	r2, 1a000f38 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000f34:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000f38:	b10b      	cbz	r3, 1a000f3e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000f3a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000f3e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000f42:	3016      	adds	r0, #22
1a000f44:	0080      	lsls	r0, r0, #2
1a000f46:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f4a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f4e:	6045      	str	r5, [r0, #4]
1a000f50:	e008      	b.n	1a000f64 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000f52:	f044 0401 	orr.w	r4, r4, #1
1a000f56:	3016      	adds	r0, #22
1a000f58:	0080      	lsls	r0, r0, #2
1a000f5a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f5e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f62:	6044      	str	r4, [r0, #4]
	}
}
1a000f64:	bc30      	pop	{r4, r5}
1a000f66:	4770      	bx	lr
1a000f68:	e0fff7fe 	.word	0xe0fff7fe

1a000f6c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000f6c:	281b      	cmp	r0, #27
1a000f6e:	d80c      	bhi.n	1a000f8a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f70:	3016      	adds	r0, #22
1a000f72:	0080      	lsls	r0, r0, #2
1a000f74:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f78:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f7c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000f7e:	f010 0f01 	tst.w	r0, #1
1a000f82:	d104      	bne.n	1a000f8e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f84:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f88:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f8a:	2011      	movs	r0, #17
1a000f8c:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f8e:	2011      	movs	r0, #17
}
1a000f90:	4770      	bx	lr

1a000f92 <Chip_Clock_GetBaseClocktHz>:
{
1a000f92:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000f94:	f7ff ffea 	bl	1a000f6c <Chip_Clock_GetBaseClock>
1a000f98:	f7ff fed8 	bl	1a000d4c <Chip_Clock_GetClockInputHz>
}
1a000f9c:	bd08      	pop	{r3, pc}
1a000f9e:	Address 0x000000001a000f9e is out of bounds.


1a000fa0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000fa0:	b971      	cbnz	r1, 1a000fc0 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000fa2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000fa4:	b10a      	cbz	r2, 1a000faa <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000fa6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000faa:	2b02      	cmp	r3, #2
1a000fac:	d00a      	beq.n	1a000fc4 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000fae:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000fb2:	d30a      	bcc.n	1a000fca <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000fb4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000fb8:	4b06      	ldr	r3, [pc, #24]	; (1a000fd4 <Chip_Clock_EnableOpts+0x34>)
1a000fba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000fbe:	4770      	bx	lr
		reg |= (1 << 1);
1a000fc0:	2103      	movs	r1, #3
1a000fc2:	e7ef      	b.n	1a000fa4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000fc4:	f041 0120 	orr.w	r1, r1, #32
1a000fc8:	e7f1      	b.n	1a000fae <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000fca:	3020      	adds	r0, #32
1a000fcc:	4b02      	ldr	r3, [pc, #8]	; (1a000fd8 <Chip_Clock_EnableOpts+0x38>)
1a000fce:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000fd2:	4770      	bx	lr
1a000fd4:	40052000 	.word	0x40052000
1a000fd8:	40051000 	.word	0x40051000

1a000fdc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000fdc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000fe0:	d309      	bcc.n	1a000ff6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000fe2:	4a09      	ldr	r2, [pc, #36]	; (1a001008 <Chip_Clock_Enable+0x2c>)
1a000fe4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000fe8:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000fec:	f043 0301 	orr.w	r3, r3, #1
1a000ff0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000ff4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000ff6:	4a05      	ldr	r2, [pc, #20]	; (1a00100c <Chip_Clock_Enable+0x30>)
1a000ff8:	3020      	adds	r0, #32
1a000ffa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000ffe:	f043 0301 	orr.w	r3, r3, #1
1a001002:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001006:	4770      	bx	lr
1a001008:	40052000 	.word	0x40052000
1a00100c:	40051000 	.word	0x40051000

1a001010 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001010:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001012:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001016:	d309      	bcc.n	1a00102c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001018:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00101c:	4a0d      	ldr	r2, [pc, #52]	; (1a001054 <Chip_Clock_GetRate+0x44>)
1a00101e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001022:	f014 0f01 	tst.w	r4, #1
1a001026:	d107      	bne.n	1a001038 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001028:	2000      	movs	r0, #0
	}

	return rate;
}
1a00102a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00102c:	f100 0320 	add.w	r3, r0, #32
1a001030:	4a09      	ldr	r2, [pc, #36]	; (1a001058 <Chip_Clock_GetRate+0x48>)
1a001032:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001036:	e7f4      	b.n	1a001022 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001038:	f7ff fe20 	bl	1a000c7c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00103c:	f7ff ffa9 	bl	1a000f92 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001040:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001044:	d103      	bne.n	1a00104e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001046:	2301      	movs	r3, #1
		rate = rate / div;
1a001048:	fbb0 f0f3 	udiv	r0, r0, r3
1a00104c:	e7ed      	b.n	1a00102a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00104e:	2302      	movs	r3, #2
1a001050:	e7fa      	b.n	1a001048 <Chip_Clock_GetRate+0x38>
1a001052:	bf00      	nop
1a001054:	40052000 	.word	0x40052000
1a001058:	40051000 	.word	0x40051000

1a00105c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00105c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00105e:	2069      	movs	r0, #105	; 0x69
1a001060:	f7ff ffd6 	bl	1a001010 <Chip_Clock_GetRate>
1a001064:	4b01      	ldr	r3, [pc, #4]	; (1a00106c <SystemCoreClockUpdate+0x10>)
1a001066:	6018      	str	r0, [r3, #0]
}
1a001068:	bd08      	pop	{r3, pc}
1a00106a:	bf00      	nop
1a00106c:	1000010c 	.word	0x1000010c

1a001070 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001070:	b570      	push	{r4, r5, r6, lr}
1a001072:	b08a      	sub	sp, #40	; 0x28
1a001074:	4605      	mov	r5, r0
1a001076:	460e      	mov	r6, r1
1a001078:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00107a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00107e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001080:	2806      	cmp	r0, #6
1a001082:	d018      	beq.n	1a0010b6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001084:	2300      	movs	r3, #0
1a001086:	2201      	movs	r2, #1
1a001088:	4629      	mov	r1, r5
1a00108a:	2004      	movs	r0, #4
1a00108c:	f7ff ff42 	bl	1a000f14 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001090:	4a4a      	ldr	r2, [pc, #296]	; (1a0011bc <Chip_SetupCoreClock+0x14c>)
1a001092:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001094:	f043 0301 	orr.w	r3, r3, #1
1a001098:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00109a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00109e:	a901      	add	r1, sp, #4
1a0010a0:	4630      	mov	r0, r6
1a0010a2:	f7ff feaf 	bl	1a000e04 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0010a6:	4b46      	ldr	r3, [pc, #280]	; (1a0011c0 <Chip_SetupCoreClock+0x150>)
1a0010a8:	429e      	cmp	r6, r3
1a0010aa:	d916      	bls.n	1a0010da <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0010ac:	9b01      	ldr	r3, [sp, #4]
1a0010ae:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0010b2:	d003      	beq.n	1a0010bc <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0010b4:	e7fe      	b.n	1a0010b4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0010b6:	f7ff fe07 	bl	1a000cc8 <Chip_Clock_EnableCrystal>
1a0010ba:	e7e3      	b.n	1a001084 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0010bc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0010c0:	d005      	beq.n	1a0010ce <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0010c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0010c6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0010c8:	2500      	movs	r5, #0
			direct = 1;
1a0010ca:	2601      	movs	r6, #1
1a0010cc:	e007      	b.n	1a0010de <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0010ce:	9b04      	ldr	r3, [sp, #16]
1a0010d0:	3301      	adds	r3, #1
1a0010d2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0010d4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0010d6:	2600      	movs	r6, #0
1a0010d8:	e001      	b.n	1a0010de <Chip_SetupCoreClock+0x6e>
1a0010da:	2500      	movs	r5, #0
1a0010dc:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0010de:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0010e2:	9b01      	ldr	r3, [sp, #4]
1a0010e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0010e8:	9a05      	ldr	r2, [sp, #20]
1a0010ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0010ee:	9a03      	ldr	r2, [sp, #12]
1a0010f0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0010f4:	9a04      	ldr	r2, [sp, #16]
1a0010f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0010fe:	4a2f      	ldr	r2, [pc, #188]	; (1a0011bc <Chip_SetupCoreClock+0x14c>)
1a001100:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001102:	4b2e      	ldr	r3, [pc, #184]	; (1a0011bc <Chip_SetupCoreClock+0x14c>)
1a001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001106:	f013 0f01 	tst.w	r3, #1
1a00110a:	d0fa      	beq.n	1a001102 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00110c:	2300      	movs	r3, #0
1a00110e:	2201      	movs	r2, #1
1a001110:	2109      	movs	r1, #9
1a001112:	2004      	movs	r0, #4
1a001114:	f7ff fefe 	bl	1a000f14 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001118:	b306      	cbz	r6, 1a00115c <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00111a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00111e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001120:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001122:	1e5a      	subs	r2, r3, #1
1a001124:	9209      	str	r2, [sp, #36]	; 0x24
1a001126:	2b00      	cmp	r3, #0
1a001128:	d1fa      	bne.n	1a001120 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00112a:	9b01      	ldr	r3, [sp, #4]
1a00112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001130:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001132:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001136:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00113a:	9a05      	ldr	r2, [sp, #20]
1a00113c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001140:	9a03      	ldr	r2, [sp, #12]
1a001142:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001146:	9a04      	ldr	r2, [sp, #16]
1a001148:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00114c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001150:	4a1a      	ldr	r2, [pc, #104]	; (1a0011bc <Chip_SetupCoreClock+0x14c>)
1a001152:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001154:	2c00      	cmp	r4, #0
1a001156:	d12e      	bne.n	1a0011b6 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001158:	b00a      	add	sp, #40	; 0x28
1a00115a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a00115c:	2d00      	cmp	r5, #0
1a00115e:	d0f9      	beq.n	1a001154 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001160:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001164:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001166:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001168:	1e5a      	subs	r2, r3, #1
1a00116a:	9209      	str	r2, [sp, #36]	; 0x24
1a00116c:	2b00      	cmp	r3, #0
1a00116e:	d1fa      	bne.n	1a001166 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001170:	9b04      	ldr	r3, [sp, #16]
1a001172:	1e5a      	subs	r2, r3, #1
1a001174:	9204      	str	r2, [sp, #16]
1a001176:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00117a:	9b01      	ldr	r3, [sp, #4]
1a00117c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001180:	9905      	ldr	r1, [sp, #20]
1a001182:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001186:	9903      	ldr	r1, [sp, #12]
1a001188:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00118c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001194:	4a09      	ldr	r2, [pc, #36]	; (1a0011bc <Chip_SetupCoreClock+0x14c>)
1a001196:	6453      	str	r3, [r2, #68]	; 0x44
1a001198:	e7dc      	b.n	1a001154 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00119a:	480a      	ldr	r0, [pc, #40]	; (1a0011c4 <Chip_SetupCoreClock+0x154>)
1a00119c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0011a0:	78cb      	ldrb	r3, [r1, #3]
1a0011a2:	788a      	ldrb	r2, [r1, #2]
1a0011a4:	7849      	ldrb	r1, [r1, #1]
1a0011a6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0011aa:	f7ff feb3 	bl	1a000f14 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0011ae:	3401      	adds	r4, #1
1a0011b0:	2c11      	cmp	r4, #17
1a0011b2:	d9f2      	bls.n	1a00119a <Chip_SetupCoreClock+0x12a>
1a0011b4:	e7d0      	b.n	1a001158 <Chip_SetupCoreClock+0xe8>
1a0011b6:	2400      	movs	r4, #0
1a0011b8:	e7fa      	b.n	1a0011b0 <Chip_SetupCoreClock+0x140>
1a0011ba:	bf00      	nop
1a0011bc:	40050000 	.word	0x40050000
1a0011c0:	068e7780 	.word	0x068e7780
1a0011c4:	1a001d18 	.word	0x1a001d18

1a0011c8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0011c8:	4770      	bx	lr
1a0011ca:	Address 0x000000001a0011ca is out of bounds.


1a0011cc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0011cc:	4b03      	ldr	r3, [pc, #12]	; (1a0011dc <Chip_SSP_GetClockIndex+0x10>)
1a0011ce:	4298      	cmp	r0, r3
1a0011d0:	d001      	beq.n	1a0011d6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0011d2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0011d4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0011d6:	20a5      	movs	r0, #165	; 0xa5
1a0011d8:	4770      	bx	lr
1a0011da:	bf00      	nop
1a0011dc:	400c5000 	.word	0x400c5000

1a0011e0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0011e0:	4b04      	ldr	r3, [pc, #16]	; (1a0011f4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0011e2:	4298      	cmp	r0, r3
1a0011e4:	d002      	beq.n	1a0011ec <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0011e6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0011ea:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0011ec:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0011f0:	4770      	bx	lr
1a0011f2:	bf00      	nop
1a0011f4:	400c5000 	.word	0x400c5000

1a0011f8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0011f8:	6803      	ldr	r3, [r0, #0]
1a0011fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0011fe:	0209      	lsls	r1, r1, #8
1a001200:	b289      	uxth	r1, r1
1a001202:	4319      	orrs	r1, r3
1a001204:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001206:	6102      	str	r2, [r0, #16]
}
1a001208:	4770      	bx	lr

1a00120a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00120a:	b570      	push	{r4, r5, r6, lr}
1a00120c:	4606      	mov	r6, r0
1a00120e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001210:	f7ff ffe6 	bl	1a0011e0 <Chip_SSP_GetPeriphClockIndex>
1a001214:	f7ff fefc 	bl	1a001010 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001218:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00121e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001220:	e000      	b.n	1a001224 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001222:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001224:	42ab      	cmp	r3, r5
1a001226:	d90b      	bls.n	1a001240 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001228:	1c4c      	adds	r4, r1, #1
1a00122a:	fb02 f304 	mul.w	r3, r2, r4
1a00122e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001232:	429d      	cmp	r5, r3
1a001234:	d2f6      	bcs.n	1a001224 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001236:	2cff      	cmp	r4, #255	; 0xff
1a001238:	d9f3      	bls.n	1a001222 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00123a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00123c:	2100      	movs	r1, #0
1a00123e:	e7f1      	b.n	1a001224 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001240:	4630      	mov	r0, r6
1a001242:	f7ff ffd9 	bl	1a0011f8 <Chip_SSP_SetClockRate>
}
1a001246:	bd70      	pop	{r4, r5, r6, pc}

1a001248 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001248:	b510      	push	{r4, lr}
1a00124a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00124c:	f7ff ffbe 	bl	1a0011cc <Chip_SSP_GetClockIndex>
1a001250:	f7ff fec4 	bl	1a000fdc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001254:	4620      	mov	r0, r4
1a001256:	f7ff ffc3 	bl	1a0011e0 <Chip_SSP_GetPeriphClockIndex>
1a00125a:	f7ff febf 	bl	1a000fdc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00125e:	6863      	ldr	r3, [r4, #4]
1a001260:	f023 0304 	bic.w	r3, r3, #4
1a001264:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001266:	6823      	ldr	r3, [r4, #0]
1a001268:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00126c:	f043 0307 	orr.w	r3, r3, #7
1a001270:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001272:	4902      	ldr	r1, [pc, #8]	; (1a00127c <Chip_SSP_Init+0x34>)
1a001274:	4620      	mov	r0, r4
1a001276:	f7ff ffc8 	bl	1a00120a <Chip_SSP_SetBitRate>
}
1a00127a:	bd10      	pop	{r4, pc}
1a00127c:	000186a0 	.word	0x000186a0

1a001280 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001280:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001282:	4a0b      	ldr	r2, [pc, #44]	; (1a0012b0 <SystemInit+0x30>)
1a001284:	4b0b      	ldr	r3, [pc, #44]	; (1a0012b4 <SystemInit+0x34>)
1a001286:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001288:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00128c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00128e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001292:	2b20      	cmp	r3, #32
1a001294:	d004      	beq.n	1a0012a0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a001296:	f7ff fac5 	bl	1a000824 <Board_SystemInit>
   Board_Init();
1a00129a:	f7ff fa55 	bl	1a000748 <Board_Init>
#endif
}
1a00129e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0012a0:	4a04      	ldr	r2, [pc, #16]	; (1a0012b4 <SystemInit+0x34>)
1a0012a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0012a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0012aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0012ae:	e7f2      	b.n	1a001296 <SystemInit+0x16>
1a0012b0:	1a000000 	.word	0x1a000000
1a0012b4:	e000ed00 	.word	0xe000ed00

1a0012b8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0012b8:	4b04      	ldr	r3, [pc, #16]	; (1a0012cc <cyclesCounterInit+0x14>)
1a0012ba:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0012bc:	4a04      	ldr	r2, [pc, #16]	; (1a0012d0 <cyclesCounterInit+0x18>)
1a0012be:	6813      	ldr	r3, [r2, #0]
1a0012c0:	f043 0301 	orr.w	r3, r3, #1
1a0012c4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0012c6:	2001      	movs	r0, #1
1a0012c8:	4770      	bx	lr
1a0012ca:	bf00      	nop
1a0012cc:	10000038 	.word	0x10000038
1a0012d0:	e0001000 	.word	0xe0001000

1a0012d4 <sleepUntilNextInterrupt>:
 */
void sleepUntilNextInterrupt( void )
{

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a0012d4:	bf30      	wfi

}
1a0012d6:	4770      	bx	lr

1a0012d8 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0012d8:	4b01      	ldr	r3, [pc, #4]	; (1a0012e0 <tickRead+0x8>)
1a0012da:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0012de:	4770      	bx	lr
1a0012e0:	100000f8 	.word	0x100000f8

1a0012e4 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a0012e4:	b130      	cbz	r0, 1a0012f4 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a0012e6:	4a05      	ldr	r2, [pc, #20]	; (1a0012fc <tickCallbackSet+0x18>)
1a0012e8:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a0012ea:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a0012ec:	b121      	cbz	r1, 1a0012f8 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a0012ee:	4b04      	ldr	r3, [pc, #16]	; (1a001300 <tickCallbackSet+0x1c>)
1a0012f0:	6019      	str	r1, [r3, #0]
1a0012f2:	4770      	bx	lr
         retVal = FALSE;
1a0012f4:	2000      	movs	r0, #0
1a0012f6:	e7f9      	b.n	1a0012ec <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a0012f8:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a0012fa:	4770      	bx	lr
1a0012fc:	10000100 	.word	0x10000100
1a001300:	100000f0 	.word	0x100000f0

1a001304 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001304:	b118      	cbz	r0, 1a00130e <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001306:	4b04      	ldr	r3, [pc, #16]	; (1a001318 <tickPowerSet+0x14>)
1a001308:	2207      	movs	r2, #7
1a00130a:	601a      	str	r2, [r3, #0]
1a00130c:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00130e:	4b02      	ldr	r3, [pc, #8]	; (1a001318 <tickPowerSet+0x14>)
1a001310:	2200      	movs	r2, #0
1a001312:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001314:	4770      	bx	lr
1a001316:	bf00      	nop
1a001318:	e000e010 	.word	0xe000e010

1a00131c <tickInit>:
{
1a00131c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00131e:	ea50 0401 	orrs.w	r4, r0, r1
1a001322:	d02a      	beq.n	1a00137a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001324:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001328:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00132c:	2b00      	cmp	r3, #0
1a00132e:	bf08      	it	eq
1a001330:	2a32      	cmpeq	r2, #50	; 0x32
1a001332:	d227      	bcs.n	1a001384 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001334:	4b14      	ldr	r3, [pc, #80]	; (1a001388 <tickInit+0x6c>)
1a001336:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00133a:	4b14      	ldr	r3, [pc, #80]	; (1a00138c <tickInit+0x70>)
1a00133c:	681b      	ldr	r3, [r3, #0]
1a00133e:	fba3 4500 	umull	r4, r5, r3, r0
1a001342:	fb03 5501 	mla	r5, r3, r1, r5
1a001346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00134a:	2300      	movs	r3, #0
1a00134c:	4620      	mov	r0, r4
1a00134e:	4629      	mov	r1, r5
1a001350:	f000 fa94 	bl	1a00187c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001354:	3801      	subs	r0, #1
1a001356:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00135a:	d209      	bcs.n	1a001370 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00135c:	4b0c      	ldr	r3, [pc, #48]	; (1a001390 <tickInit+0x74>)
1a00135e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001360:	4a0c      	ldr	r2, [pc, #48]	; (1a001394 <tickInit+0x78>)
1a001362:	21e0      	movs	r1, #224	; 0xe0
1a001364:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001368:	2200      	movs	r2, #0
1a00136a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00136c:	2207      	movs	r2, #7
1a00136e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001370:	2001      	movs	r0, #1
1a001372:	f7ff ffc7 	bl	1a001304 <tickPowerSet>
      bool_t ret_val = 1;
1a001376:	2001      	movs	r0, #1
}
1a001378:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00137a:	2000      	movs	r0, #0
1a00137c:	f7ff ffc2 	bl	1a001304 <tickPowerSet>
         ret_val = 0;
1a001380:	2000      	movs	r0, #0
1a001382:	e7f9      	b.n	1a001378 <tickInit+0x5c>
            ret_val = 0;
1a001384:	2000      	movs	r0, #0
1a001386:	e7f7      	b.n	1a001378 <tickInit+0x5c>
1a001388:	10000040 	.word	0x10000040
1a00138c:	1000010c 	.word	0x1000010c
1a001390:	e000e010 	.word	0xe000e010
1a001394:	e000ed00 	.word	0xe000ed00

1a001398 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001398:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00139a:	4a07      	ldr	r2, [pc, #28]	; (1a0013b8 <SysTick_Handler+0x20>)
1a00139c:	6813      	ldr	r3, [r2, #0]
1a00139e:	6851      	ldr	r1, [r2, #4]
1a0013a0:	3301      	adds	r3, #1
1a0013a2:	f141 0100 	adc.w	r1, r1, #0
1a0013a6:	6013      	str	r3, [r2, #0]
1a0013a8:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0013aa:	4b04      	ldr	r3, [pc, #16]	; (1a0013bc <SysTick_Handler+0x24>)
1a0013ac:	681b      	ldr	r3, [r3, #0]
1a0013ae:	b113      	cbz	r3, 1a0013b6 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0013b0:	4a03      	ldr	r2, [pc, #12]	; (1a0013c0 <SysTick_Handler+0x28>)
1a0013b2:	6810      	ldr	r0, [r2, #0]
1a0013b4:	4798      	blx	r3
   }
}
1a0013b6:	bd08      	pop	{r3, pc}
1a0013b8:	100000f8 	.word	0x100000f8
1a0013bc:	10000100 	.word	0x10000100
1a0013c0:	100000f0 	.word	0x100000f0

1a0013c4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0013c4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0013c6:	4d0b      	ldr	r5, [pc, #44]	; (1a0013f4 <gpioObtainPinInit+0x30>)
1a0013c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0013cc:	182c      	adds	r4, r5, r0
1a0013ce:	5628      	ldrsb	r0, [r5, r0]
1a0013d0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0013d2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0013d6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0013d8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0013dc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0013de:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0013e2:	9b02      	ldr	r3, [sp, #8]
1a0013e4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0013e6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0013ea:	9b03      	ldr	r3, [sp, #12]
1a0013ec:	701a      	strb	r2, [r3, #0]
}
1a0013ee:	bc30      	pop	{r4, r5}
1a0013f0:	4770      	bx	lr
1a0013f2:	bf00      	nop
1a0013f4:	1a001d60 	.word	0x1a001d60

1a0013f8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0013f8:	f110 0f02 	cmn.w	r0, #2
1a0013fc:	f000 80c7 	beq.w	1a00158e <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001400:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001404:	f000 80c5 	beq.w	1a001592 <gpioInit+0x19a>
{
1a001408:	b570      	push	{r4, r5, r6, lr}
1a00140a:	b084      	sub	sp, #16
1a00140c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00140e:	2300      	movs	r3, #0
1a001410:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001414:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001418:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00141c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001420:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001424:	f10d 030b 	add.w	r3, sp, #11
1a001428:	9301      	str	r3, [sp, #4]
1a00142a:	ab03      	add	r3, sp, #12
1a00142c:	9300      	str	r3, [sp, #0]
1a00142e:	f10d 030d 	add.w	r3, sp, #13
1a001432:	f10d 020e 	add.w	r2, sp, #14
1a001436:	f10d 010f 	add.w	r1, sp, #15
1a00143a:	f7ff ffc3 	bl	1a0013c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00143e:	2c05      	cmp	r4, #5
1a001440:	f200 80a9 	bhi.w	1a001596 <gpioInit+0x19e>
1a001444:	e8df f004 	tbb	[pc, r4]
1a001448:	45278109 	.word	0x45278109
1a00144c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00144e:	4853      	ldr	r0, [pc, #332]	; (1a00159c <gpioInit+0x1a4>)
1a001450:	f7ff feba 	bl	1a0011c8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001454:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001456:	b004      	add	sp, #16
1a001458:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00145a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00145e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001462:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001466:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00146a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00146e:	494c      	ldr	r1, [pc, #304]	; (1a0015a0 <gpioInit+0x1a8>)
1a001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001474:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001478:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00147c:	2001      	movs	r0, #1
1a00147e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001482:	4c46      	ldr	r4, [pc, #280]	; (1a00159c <gpioInit+0x1a4>)
1a001484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001488:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00148c:	ea22 0201 	bic.w	r2, r2, r1
1a001490:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001494:	e7df      	b.n	1a001456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001496:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00149a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00149e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014a2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0014a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014aa:	493d      	ldr	r1, [pc, #244]	; (1a0015a0 <gpioInit+0x1a8>)
1a0014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014b8:	2001      	movs	r0, #1
1a0014ba:	fa00 f102 	lsl.w	r1, r0, r2
1a0014be:	4c37      	ldr	r4, [pc, #220]	; (1a00159c <gpioInit+0x1a4>)
1a0014c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014c8:	ea22 0201 	bic.w	r2, r2, r1
1a0014cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0014d0:	e7c1      	b.n	1a001456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0014d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014de:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0014e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014e6:	492e      	ldr	r1, [pc, #184]	; (1a0015a0 <gpioInit+0x1a8>)
1a0014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014f4:	2001      	movs	r0, #1
1a0014f6:	fa00 f102 	lsl.w	r1, r0, r2
1a0014fa:	4c28      	ldr	r4, [pc, #160]	; (1a00159c <gpioInit+0x1a4>)
1a0014fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001500:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001504:	ea22 0201 	bic.w	r2, r2, r1
1a001508:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00150c:	e7a3      	b.n	1a001456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00150e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001512:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001516:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00151a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00151e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001522:	491f      	ldr	r1, [pc, #124]	; (1a0015a0 <gpioInit+0x1a8>)
1a001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001528:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00152c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001530:	2001      	movs	r0, #1
1a001532:	fa00 f102 	lsl.w	r1, r0, r2
1a001536:	4c19      	ldr	r4, [pc, #100]	; (1a00159c <gpioInit+0x1a4>)
1a001538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00153c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001540:	ea22 0201 	bic.w	r2, r2, r1
1a001544:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001548:	e785      	b.n	1a001456 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00154a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00154e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001552:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001556:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00155a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00155e:	4910      	ldr	r1, [pc, #64]	; (1a0015a0 <gpioInit+0x1a8>)
1a001560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001564:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001568:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00156c:	2001      	movs	r0, #1
1a00156e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001572:	4b0a      	ldr	r3, [pc, #40]	; (1a00159c <gpioInit+0x1a4>)
1a001574:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001578:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00157c:	4331      	orrs	r1, r6
1a00157e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001582:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001584:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001588:	2100      	movs	r1, #0
1a00158a:	5499      	strb	r1, [r3, r2]
1a00158c:	e763      	b.n	1a001456 <gpioInit+0x5e>
	  return FALSE;
1a00158e:	2000      	movs	r0, #0
1a001590:	4770      	bx	lr
	  return FALSE;
1a001592:	2000      	movs	r0, #0
}
1a001594:	4770      	bx	lr
      ret_val = 0;
1a001596:	2000      	movs	r0, #0
1a001598:	e75d      	b.n	1a001456 <gpioInit+0x5e>
1a00159a:	bf00      	nop
1a00159c:	400f4000 	.word	0x400f4000
1a0015a0:	40086000 	.word	0x40086000

1a0015a4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0015a4:	f110 0f02 	cmn.w	r0, #2
1a0015a8:	d02d      	beq.n	1a001606 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0015aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0015ae:	d02c      	beq.n	1a00160a <gpioWrite+0x66>
{
1a0015b0:	b510      	push	{r4, lr}
1a0015b2:	b084      	sub	sp, #16
1a0015b4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0015b6:	2300      	movs	r3, #0
1a0015b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0015bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0015c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0015c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0015c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0015cc:	f10d 030b 	add.w	r3, sp, #11
1a0015d0:	9301      	str	r3, [sp, #4]
1a0015d2:	ab03      	add	r3, sp, #12
1a0015d4:	9300      	str	r3, [sp, #0]
1a0015d6:	f10d 030d 	add.w	r3, sp, #13
1a0015da:	f10d 020e 	add.w	r2, sp, #14
1a0015de:	f10d 010f 	add.w	r1, sp, #15
1a0015e2:	f7ff feef 	bl	1a0013c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0015e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0015ee:	1c21      	adds	r1, r4, #0
1a0015f0:	bf18      	it	ne
1a0015f2:	2101      	movne	r1, #1
1a0015f4:	015b      	lsls	r3, r3, #5
1a0015f6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0015fa:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0015fe:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001600:	2001      	movs	r0, #1
}
1a001602:	b004      	add	sp, #16
1a001604:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001606:	2000      	movs	r0, #0
1a001608:	4770      	bx	lr
	  return FALSE;
1a00160a:	2000      	movs	r0, #0
}
1a00160c:	4770      	bx	lr

1a00160e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00160e:	f110 0f02 	cmn.w	r0, #2
1a001612:	d02c      	beq.n	1a00166e <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001614:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001618:	d02b      	beq.n	1a001672 <gpioRead+0x64>
{
1a00161a:	b500      	push	{lr}
1a00161c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00161e:	2300      	movs	r3, #0
1a001620:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001624:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001628:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00162c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001630:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001634:	f10d 030b 	add.w	r3, sp, #11
1a001638:	9301      	str	r3, [sp, #4]
1a00163a:	ab03      	add	r3, sp, #12
1a00163c:	9300      	str	r3, [sp, #0]
1a00163e:	f10d 030d 	add.w	r3, sp, #13
1a001642:	f10d 020e 	add.w	r2, sp, #14
1a001646:	f10d 010f 	add.w	r1, sp, #15
1a00164a:	f7ff febb 	bl	1a0013c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00164e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001652:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001656:	015b      	lsls	r3, r3, #5
1a001658:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00165c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001660:	5c98      	ldrb	r0, [r3, r2]
1a001662:	3000      	adds	r0, #0
1a001664:	bf18      	it	ne
1a001666:	2001      	movne	r0, #1

   return ret_val;
}
1a001668:	b005      	add	sp, #20
1a00166a:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00166e:	2001      	movs	r0, #1
1a001670:	4770      	bx	lr
      return FALSE;
1a001672:	2000      	movs	r0, #0
}
1a001674:	4770      	bx	lr

1a001676 <gpioToggle>:
{
1a001676:	b510      	push	{r4, lr}
1a001678:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a00167a:	f7ff ffc8 	bl	1a00160e <gpioRead>
1a00167e:	fab0 f180 	clz	r1, r0
1a001682:	0949      	lsrs	r1, r1, #5
1a001684:	4620      	mov	r0, r4
1a001686:	f7ff ff8d 	bl	1a0015a4 <gpioWrite>
}
1a00168a:	bd10      	pop	{r4, pc}

1a00168c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00168c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00168e:	4b04      	ldr	r3, [pc, #16]	; (1a0016a0 <USB0_IRQHandler+0x14>)
1a001690:	681b      	ldr	r3, [r3, #0]
1a001692:	681b      	ldr	r3, [r3, #0]
1a001694:	68db      	ldr	r3, [r3, #12]
1a001696:	4a03      	ldr	r2, [pc, #12]	; (1a0016a4 <USB0_IRQHandler+0x18>)
1a001698:	6810      	ldr	r0, [r2, #0]
1a00169a:	4798      	blx	r3
}
1a00169c:	bd08      	pop	{r3, pc}
1a00169e:	bf00      	nop
1a0016a0:	10000110 	.word	0x10000110
1a0016a4:	10000104 	.word	0x10000104

1a0016a8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0016a8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0016aa:	f7ff fcd7 	bl	1a00105c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0016ae:	4b1a      	ldr	r3, [pc, #104]	; (1a001718 <boardInit+0x70>)
1a0016b0:	6818      	ldr	r0, [r3, #0]
1a0016b2:	f7ff fe01 	bl	1a0012b8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0016b6:	2001      	movs	r0, #1
1a0016b8:	2100      	movs	r1, #0
1a0016ba:	f7ff fe2f 	bl	1a00131c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0016be:	2105      	movs	r1, #5
1a0016c0:	2000      	movs	r0, #0
1a0016c2:	f7ff fe99 	bl	1a0013f8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0016c6:	2100      	movs	r1, #0
1a0016c8:	2024      	movs	r0, #36	; 0x24
1a0016ca:	f7ff fe95 	bl	1a0013f8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0016ce:	2100      	movs	r1, #0
1a0016d0:	2025      	movs	r0, #37	; 0x25
1a0016d2:	f7ff fe91 	bl	1a0013f8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0016d6:	2100      	movs	r1, #0
1a0016d8:	2026      	movs	r0, #38	; 0x26
1a0016da:	f7ff fe8d 	bl	1a0013f8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0016de:	2100      	movs	r1, #0
1a0016e0:	2027      	movs	r0, #39	; 0x27
1a0016e2:	f7ff fe89 	bl	1a0013f8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0016e6:	2101      	movs	r1, #1
1a0016e8:	2028      	movs	r0, #40	; 0x28
1a0016ea:	f7ff fe85 	bl	1a0013f8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0016ee:	2101      	movs	r1, #1
1a0016f0:	2029      	movs	r0, #41	; 0x29
1a0016f2:	f7ff fe81 	bl	1a0013f8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0016f6:	2101      	movs	r1, #1
1a0016f8:	202a      	movs	r0, #42	; 0x2a
1a0016fa:	f7ff fe7d 	bl	1a0013f8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0016fe:	2101      	movs	r1, #1
1a001700:	202b      	movs	r0, #43	; 0x2b
1a001702:	f7ff fe79 	bl	1a0013f8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001706:	2101      	movs	r1, #1
1a001708:	202c      	movs	r0, #44	; 0x2c
1a00170a:	f7ff fe75 	bl	1a0013f8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00170e:	2101      	movs	r1, #1
1a001710:	202d      	movs	r0, #45	; 0x2d
1a001712:	f7ff fe71 	bl	1a0013f8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001716:	bd08      	pop	{r3, pc}
1a001718:	1000010c 	.word	0x1000010c

1a00171c <schedulerGoToSleep>:
to save power. The next clock tick will return the processor
to the normal operating state.
*** May wish to disable this if using a watchdog ***
*** ADAPT AS REQUIRED FOR YOUR HARDWARE ***
-*------------------------------------------------------------------*/
static void schedulerGoToSleep(){
1a00171c:	b508      	push	{r3, lr}
   // Se pone el sistema en bajo consumo hasta que ocurra la proxima
   // interrupcion, en este caso la de Tick.
   sleepUntilNextInterrupt();
1a00171e:	f7ff fdd9 	bl	1a0012d4 <sleepUntilNextInterrupt>
}
1a001722:	bd08      	pop	{r3, pc}

1a001724 <schedulerAddTask>:
                        ){
1a001724:	b4f0      	push	{r4, r5, r6, r7}
1a001726:	4607      	mov	r7, r0
   int32_t index = 0;
1a001728:	2000      	movs	r0, #0
   while( (schedulerTasks[index].pTask != 0) && (index < SCHEDULER_MAX_TASKS) ){
1a00172a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
1a00172e:	00ac      	lsls	r4, r5, #2
1a001730:	4d0c      	ldr	r5, [pc, #48]	; (1a001764 <schedulerAddTask+0x40>)
1a001732:	592c      	ldr	r4, [r5, r4]
1a001734:	b11c      	cbz	r4, 1a00173e <schedulerAddTask+0x1a>
1a001736:	2809      	cmp	r0, #9
1a001738:	dc01      	bgt.n	1a00173e <schedulerAddTask+0x1a>
      index++;
1a00173a:	3001      	adds	r0, #1
1a00173c:	e7f5      	b.n	1a00172a <schedulerAddTask+0x6>
   if( index == SCHEDULER_MAX_TASKS ){
1a00173e:	280a      	cmp	r0, #10
1a001740:	d00c      	beq.n	1a00175c <schedulerAddTask+0x38>
   schedulerTasks[index].pTask  = pFunction;
1a001742:	4e08      	ldr	r6, [pc, #32]	; (1a001764 <schedulerAddTask+0x40>)
1a001744:	0084      	lsls	r4, r0, #2
1a001746:	4404      	add	r4, r0
1a001748:	00a5      	lsls	r5, r4, #2
1a00174a:	1974      	adds	r4, r6, r5
1a00174c:	5177      	str	r7, [r6, r5]
   schedulerTasks[index].delay  = DELAY;
1a00174e:	60a2      	str	r2, [r4, #8]
   schedulerTasks[index].period = PERIOD;
1a001750:	60e3      	str	r3, [r4, #12]
   schedulerTasks[index].taskParam = TASKPARAM;
1a001752:	6061      	str	r1, [r4, #4]
   schedulerTasks[index].runMe  = 0;
1a001754:	2300      	movs	r3, #0
1a001756:	6123      	str	r3, [r4, #16]
}
1a001758:	bcf0      	pop	{r4, r5, r6, r7}
1a00175a:	4770      	bx	lr
      errorCode = 2; // ERROR_schedulerTOO_MANYTasks;
1a00175c:	4b02      	ldr	r3, [pc, #8]	; (1a001768 <schedulerAddTask+0x44>)
1a00175e:	2202      	movs	r2, #2
1a001760:	701a      	strb	r2, [r3, #0]
      return SCHEDULER_MAX_TASKS;
1a001762:	e7f9      	b.n	1a001758 <schedulerAddTask+0x34>
1a001764:	10000114 	.word	0x10000114
1a001768:	10000108 	.word	0x10000108

1a00176c <schedulerDeleteTask>:
int8_t schedulerDeleteTask( int32_t taskIndex ){
1a00176c:	b470      	push	{r4, r5, r6}
   if(schedulerTasks[taskIndex].pTask == 0){
1a00176e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001772:	0093      	lsls	r3, r2, #2
1a001774:	4a0c      	ldr	r2, [pc, #48]	; (1a0017a8 <schedulerDeleteTask+0x3c>)
1a001776:	58d3      	ldr	r3, [r2, r3]
1a001778:	b17b      	cbz	r3, 1a00179a <schedulerDeleteTask+0x2e>
      returnCode = 0; // RETURN_NORMAL;
1a00177a:	2600      	movs	r6, #0
   schedulerTasks[taskIndex].pTask = 0x0000;
1a00177c:	4b0a      	ldr	r3, [pc, #40]	; (1a0017a8 <schedulerDeleteTask+0x3c>)
1a00177e:	0081      	lsls	r1, r0, #2
1a001780:	180a      	adds	r2, r1, r0
1a001782:	0095      	lsls	r5, r2, #2
1a001784:	195c      	adds	r4, r3, r5
1a001786:	2200      	movs	r2, #0
1a001788:	515a      	str	r2, [r3, r5]
   schedulerTasks[taskIndex].delay = (int32_t)0;
1a00178a:	60a2      	str	r2, [r4, #8]
   schedulerTasks[taskIndex].period = (int32_t)0;
1a00178c:	60e2      	str	r2, [r4, #12]
   schedulerTasks[taskIndex].runMe = (int8_t)0;
1a00178e:	6122      	str	r2, [r4, #16]
   schedulerTasks[taskIndex].taskParam = 0;
1a001790:	442b      	add	r3, r5
1a001792:	605a      	str	r2, [r3, #4]
}
1a001794:	4630      	mov	r0, r6
1a001796:	bc70      	pop	{r4, r5, r6}
1a001798:	4770      	bx	lr
      errorCode = 2; // ERROR_SCH_CANNOT_DELETE_TASK;
1a00179a:	4b04      	ldr	r3, [pc, #16]	; (1a0017ac <schedulerDeleteTask+0x40>)
1a00179c:	2202      	movs	r2, #2
1a00179e:	701a      	strb	r2, [r3, #0]
      returnCode = -1; // RETURN_ERROR;
1a0017a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
1a0017a4:	e7ea      	b.n	1a00177c <schedulerDeleteTask+0x10>
1a0017a6:	bf00      	nop
1a0017a8:	10000114 	.word	0x10000114
1a0017ac:	10000108 	.word	0x10000108

1a0017b0 <schedulerDispatchTasks>:
void schedulerDispatchTasks( void ){ // Despachador (corre en el main)
1a0017b0:	b538      	push	{r3, r4, r5, lr}
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a0017b2:	2400      	movs	r4, #0
1a0017b4:	e003      	b.n	1a0017be <schedulerDispatchTasks+0xe>
            schedulerDeleteTask(index);
1a0017b6:	4620      	mov	r0, r4
1a0017b8:	f7ff ffd8 	bl	1a00176c <schedulerDeleteTask>
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a0017bc:	3401      	adds	r4, #1
1a0017be:	2c09      	cmp	r4, #9
1a0017c0:	dc13      	bgt.n	1a0017ea <schedulerDispatchTasks+0x3a>
      if (schedulerTasks[index].runMe > 0){
1a0017c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0017c6:	009a      	lsls	r2, r3, #2
1a0017c8:	4b09      	ldr	r3, [pc, #36]	; (1a0017f0 <schedulerDispatchTasks+0x40>)
1a0017ca:	4413      	add	r3, r2
1a0017cc:	691b      	ldr	r3, [r3, #16]
1a0017ce:	2b00      	cmp	r3, #0
1a0017d0:	ddf4      	ble.n	1a0017bc <schedulerDispatchTasks+0xc>
         (*schedulerTasks[index].pTask)(schedulerTasks[index].taskParam); // Run the task
1a0017d2:	4907      	ldr	r1, [pc, #28]	; (1a0017f0 <schedulerDispatchTasks+0x40>)
1a0017d4:	188d      	adds	r5, r1, r2
1a0017d6:	588b      	ldr	r3, [r1, r2]
1a0017d8:	6868      	ldr	r0, [r5, #4]
1a0017da:	4798      	blx	r3
         schedulerTasks[index].runMe -= 1;  // Reset/reduce runMe flag
1a0017dc:	692b      	ldr	r3, [r5, #16]
1a0017de:	3b01      	subs	r3, #1
1a0017e0:	612b      	str	r3, [r5, #16]
         if (schedulerTasks[index].period == 0){
1a0017e2:	68eb      	ldr	r3, [r5, #12]
1a0017e4:	2b00      	cmp	r3, #0
1a0017e6:	d1e9      	bne.n	1a0017bc <schedulerDispatchTasks+0xc>
1a0017e8:	e7e5      	b.n	1a0017b6 <schedulerDispatchTasks+0x6>
   schedulerGoToSleep();
1a0017ea:	f7ff ff97 	bl	1a00171c <schedulerGoToSleep>
}
1a0017ee:	bd38      	pop	{r3, r4, r5, pc}
1a0017f0:	10000114 	.word	0x10000114

1a0017f4 <schedulerUpdate>:

   int32_t index;
   //serialDebugPrintLnString( "schedulerUpdate." );

   // NOTE: calculations are in *TICKS* (not milliseconds)
   for( index = 0; index < SCHEDULER_MAX_TASKS; index++ ){
1a0017f4:	2300      	movs	r3, #0
1a0017f6:	e000      	b.n	1a0017fa <schedulerUpdate+0x6>
1a0017f8:	3301      	adds	r3, #1
1a0017fa:	2b09      	cmp	r3, #9
1a0017fc:	dc1b      	bgt.n	1a001836 <schedulerUpdate+0x42>
      // Check if there is a task at this location
      if( schedulerTasks[index].pTask ){
1a0017fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001802:	008a      	lsls	r2, r1, #2
1a001804:	490c      	ldr	r1, [pc, #48]	; (1a001838 <schedulerUpdate+0x44>)
1a001806:	588a      	ldr	r2, [r1, r2]
1a001808:	2a00      	cmp	r2, #0
1a00180a:	d0f5      	beq.n	1a0017f8 <schedulerUpdate+0x4>
         if( --schedulerTasks[index].delay <= 0 ){   /* if (schedulerTasks[index].delay == 0) */
1a00180c:	009a      	lsls	r2, r3, #2
1a00180e:	441a      	add	r2, r3
1a001810:	0090      	lsls	r0, r2, #2
1a001812:	4401      	add	r1, r0
1a001814:	688a      	ldr	r2, [r1, #8]
1a001816:	3a01      	subs	r2, #1
1a001818:	608a      	str	r2, [r1, #8]
1a00181a:	2a00      	cmp	r2, #0
1a00181c:	dcec      	bgt.n	1a0017f8 <schedulerUpdate+0x4>
            // The task is due to run
            schedulerTasks[index].runMe += 1; // Inc. the 'runMe' flag
1a00181e:	4a06      	ldr	r2, [pc, #24]	; (1a001838 <schedulerUpdate+0x44>)
1a001820:	4402      	add	r2, r0
1a001822:	6911      	ldr	r1, [r2, #16]
1a001824:	3101      	adds	r1, #1
1a001826:	6111      	str	r1, [r2, #16]
            if( schedulerTasks[index].period ){
1a001828:	68d2      	ldr	r2, [r2, #12]
1a00182a:	2a00      	cmp	r2, #0
1a00182c:	d0e4      	beq.n	1a0017f8 <schedulerUpdate+0x4>
               // Schedule regular tasks to run again
               schedulerTasks[index].delay = schedulerTasks[index].period;
1a00182e:	4902      	ldr	r1, [pc, #8]	; (1a001838 <schedulerUpdate+0x44>)
1a001830:	4401      	add	r1, r0
1a001832:	608a      	str	r2, [r1, #8]
1a001834:	e7e0      	b.n	1a0017f8 <schedulerUpdate+0x4>
            // Not yet ready to run: just decrement the delay
            schedulerTasks[Index].delay -= 1;
         }*/
      }
   }
}
1a001836:	4770      	bx	lr
1a001838:	10000114 	.word	0x10000114

1a00183c <schedulerInit>:
void schedulerInit( void ){
1a00183c:	b510      	push	{r4, lr}
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a00183e:	2400      	movs	r4, #0
1a001840:	2c09      	cmp	r4, #9
1a001842:	d804      	bhi.n	1a00184e <schedulerInit+0x12>
      schedulerDeleteTask(i);
1a001844:	4620      	mov	r0, r4
1a001846:	f7ff ff91 	bl	1a00176c <schedulerDeleteTask>
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a00184a:	3401      	adds	r4, #1
1a00184c:	e7f8      	b.n	1a001840 <schedulerInit+0x4>
   errorCode = 0;
1a00184e:	4b04      	ldr	r3, [pc, #16]	; (1a001860 <schedulerInit+0x24>)
1a001850:	2200      	movs	r2, #0
1a001852:	701a      	strb	r2, [r3, #0]
   if( tickInit( 1 ) ){
1a001854:	2001      	movs	r0, #1
1a001856:	2100      	movs	r1, #0
1a001858:	f7ff fd60 	bl	1a00131c <tickInit>
}
1a00185c:	bd10      	pop	{r4, pc}
1a00185e:	bf00      	nop
1a001860:	10000108 	.word	0x10000108

1a001864 <schedulerStart>:
Starts the scheduler, by enabling timer interrupts.
NOTE: Usually called after all regular tasks are added,
to keep the tasks synchronized.
NOTE: ONLY THE SCHEDULER INTERRUPT SHOULD BE ENABLED!!!
-*------------------------------------------------------------------*/
void schedulerStart( tick_t tickRateMs ){
1a001864:	b508      	push	{r3, lr}
      El tick hook es simplemente una funcion que se ejecutara periodicamente
      con cada interrupcion de Tick, este nombre se refiere a una funcion
      "enganchada" a una interrupcion */

   // Inicializar el conteo de Ticks con resolucion de 1ms, con tickHook
   if( tickInit( tickRateMs ) ){
1a001866:	f7ff fd59 	bl	1a00131c <tickInit>
1a00186a:	b900      	cbnz	r0, 1a00186e <schedulerStart+0xa>
//      serialDebugPrintLnString( "Comienzo del planificador." );
      tickCallbackSet( schedulerUpdate, NULL );
   }
}
1a00186c:	bd08      	pop	{r3, pc}
      tickCallbackSet( schedulerUpdate, NULL );
1a00186e:	2100      	movs	r1, #0
1a001870:	4801      	ldr	r0, [pc, #4]	; (1a001878 <schedulerStart+0x14>)
1a001872:	f7ff fd37 	bl	1a0012e4 <tickCallbackSet>
}
1a001876:	e7f9      	b.n	1a00186c <schedulerStart+0x8>
1a001878:	1a0017f5 	.word	0x1a0017f5

1a00187c <__aeabi_uldivmod>:
1a00187c:	b953      	cbnz	r3, 1a001894 <__aeabi_uldivmod+0x18>
1a00187e:	b94a      	cbnz	r2, 1a001894 <__aeabi_uldivmod+0x18>
1a001880:	2900      	cmp	r1, #0
1a001882:	bf08      	it	eq
1a001884:	2800      	cmpeq	r0, #0
1a001886:	bf1c      	itt	ne
1a001888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00188c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001890:	f000 b974 	b.w	1a001b7c <__aeabi_idiv0>
1a001894:	f1ad 0c08 	sub.w	ip, sp, #8
1a001898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00189c:	f000 f806 	bl	1a0018ac <__udivmoddi4>
1a0018a0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0018a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0018a8:	b004      	add	sp, #16
1a0018aa:	4770      	bx	lr

1a0018ac <__udivmoddi4>:
1a0018ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0018b0:	9e08      	ldr	r6, [sp, #32]
1a0018b2:	4604      	mov	r4, r0
1a0018b4:	4688      	mov	r8, r1
1a0018b6:	2b00      	cmp	r3, #0
1a0018b8:	f040 8085 	bne.w	1a0019c6 <__udivmoddi4+0x11a>
1a0018bc:	428a      	cmp	r2, r1
1a0018be:	4615      	mov	r5, r2
1a0018c0:	d948      	bls.n	1a001954 <__udivmoddi4+0xa8>
1a0018c2:	fab2 f282 	clz	r2, r2
1a0018c6:	b14a      	cbz	r2, 1a0018dc <__udivmoddi4+0x30>
1a0018c8:	f1c2 0720 	rsb	r7, r2, #32
1a0018cc:	fa01 f302 	lsl.w	r3, r1, r2
1a0018d0:	fa20 f707 	lsr.w	r7, r0, r7
1a0018d4:	4095      	lsls	r5, r2
1a0018d6:	ea47 0803 	orr.w	r8, r7, r3
1a0018da:	4094      	lsls	r4, r2
1a0018dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0018e0:	0c23      	lsrs	r3, r4, #16
1a0018e2:	fbb8 f7fe 	udiv	r7, r8, lr
1a0018e6:	fa1f fc85 	uxth.w	ip, r5
1a0018ea:	fb0e 8817 	mls	r8, lr, r7, r8
1a0018ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0018f2:	fb07 f10c 	mul.w	r1, r7, ip
1a0018f6:	4299      	cmp	r1, r3
1a0018f8:	d909      	bls.n	1a00190e <__udivmoddi4+0x62>
1a0018fa:	18eb      	adds	r3, r5, r3
1a0018fc:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001900:	f080 80e3 	bcs.w	1a001aca <__udivmoddi4+0x21e>
1a001904:	4299      	cmp	r1, r3
1a001906:	f240 80e0 	bls.w	1a001aca <__udivmoddi4+0x21e>
1a00190a:	3f02      	subs	r7, #2
1a00190c:	442b      	add	r3, r5
1a00190e:	1a5b      	subs	r3, r3, r1
1a001910:	b2a4      	uxth	r4, r4
1a001912:	fbb3 f0fe 	udiv	r0, r3, lr
1a001916:	fb0e 3310 	mls	r3, lr, r0, r3
1a00191a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00191e:	fb00 fc0c 	mul.w	ip, r0, ip
1a001922:	45a4      	cmp	ip, r4
1a001924:	d909      	bls.n	1a00193a <__udivmoddi4+0x8e>
1a001926:	192c      	adds	r4, r5, r4
1a001928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00192c:	f080 80cb 	bcs.w	1a001ac6 <__udivmoddi4+0x21a>
1a001930:	45a4      	cmp	ip, r4
1a001932:	f240 80c8 	bls.w	1a001ac6 <__udivmoddi4+0x21a>
1a001936:	3802      	subs	r0, #2
1a001938:	442c      	add	r4, r5
1a00193a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00193e:	eba4 040c 	sub.w	r4, r4, ip
1a001942:	2700      	movs	r7, #0
1a001944:	b11e      	cbz	r6, 1a00194e <__udivmoddi4+0xa2>
1a001946:	40d4      	lsrs	r4, r2
1a001948:	2300      	movs	r3, #0
1a00194a:	e9c6 4300 	strd	r4, r3, [r6]
1a00194e:	4639      	mov	r1, r7
1a001950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001954:	2a00      	cmp	r2, #0
1a001956:	d053      	beq.n	1a001a00 <__udivmoddi4+0x154>
1a001958:	fab2 f282 	clz	r2, r2
1a00195c:	2a00      	cmp	r2, #0
1a00195e:	f040 80b6 	bne.w	1a001ace <__udivmoddi4+0x222>
1a001962:	1b49      	subs	r1, r1, r5
1a001964:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001968:	fa1f f885 	uxth.w	r8, r5
1a00196c:	2701      	movs	r7, #1
1a00196e:	fbb1 fcfe 	udiv	ip, r1, lr
1a001972:	0c23      	lsrs	r3, r4, #16
1a001974:	fb0e 111c 	mls	r1, lr, ip, r1
1a001978:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00197c:	fb08 f10c 	mul.w	r1, r8, ip
1a001980:	4299      	cmp	r1, r3
1a001982:	d907      	bls.n	1a001994 <__udivmoddi4+0xe8>
1a001984:	18eb      	adds	r3, r5, r3
1a001986:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00198a:	d202      	bcs.n	1a001992 <__udivmoddi4+0xe6>
1a00198c:	4299      	cmp	r1, r3
1a00198e:	f200 80ec 	bhi.w	1a001b6a <__udivmoddi4+0x2be>
1a001992:	4684      	mov	ip, r0
1a001994:	1a59      	subs	r1, r3, r1
1a001996:	b2a3      	uxth	r3, r4
1a001998:	fbb1 f0fe 	udiv	r0, r1, lr
1a00199c:	fb0e 1410 	mls	r4, lr, r0, r1
1a0019a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0019a4:	fb08 f800 	mul.w	r8, r8, r0
1a0019a8:	45a0      	cmp	r8, r4
1a0019aa:	d907      	bls.n	1a0019bc <__udivmoddi4+0x110>
1a0019ac:	192c      	adds	r4, r5, r4
1a0019ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0019b2:	d202      	bcs.n	1a0019ba <__udivmoddi4+0x10e>
1a0019b4:	45a0      	cmp	r8, r4
1a0019b6:	f200 80dc 	bhi.w	1a001b72 <__udivmoddi4+0x2c6>
1a0019ba:	4618      	mov	r0, r3
1a0019bc:	eba4 0408 	sub.w	r4, r4, r8
1a0019c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0019c4:	e7be      	b.n	1a001944 <__udivmoddi4+0x98>
1a0019c6:	428b      	cmp	r3, r1
1a0019c8:	d908      	bls.n	1a0019dc <__udivmoddi4+0x130>
1a0019ca:	2e00      	cmp	r6, #0
1a0019cc:	d078      	beq.n	1a001ac0 <__udivmoddi4+0x214>
1a0019ce:	2700      	movs	r7, #0
1a0019d0:	e9c6 0100 	strd	r0, r1, [r6]
1a0019d4:	4638      	mov	r0, r7
1a0019d6:	4639      	mov	r1, r7
1a0019d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0019dc:	fab3 f783 	clz	r7, r3
1a0019e0:	b97f      	cbnz	r7, 1a001a02 <__udivmoddi4+0x156>
1a0019e2:	428b      	cmp	r3, r1
1a0019e4:	d302      	bcc.n	1a0019ec <__udivmoddi4+0x140>
1a0019e6:	4282      	cmp	r2, r0
1a0019e8:	f200 80bd 	bhi.w	1a001b66 <__udivmoddi4+0x2ba>
1a0019ec:	1a84      	subs	r4, r0, r2
1a0019ee:	eb61 0303 	sbc.w	r3, r1, r3
1a0019f2:	2001      	movs	r0, #1
1a0019f4:	4698      	mov	r8, r3
1a0019f6:	2e00      	cmp	r6, #0
1a0019f8:	d0a9      	beq.n	1a00194e <__udivmoddi4+0xa2>
1a0019fa:	e9c6 4800 	strd	r4, r8, [r6]
1a0019fe:	e7a6      	b.n	1a00194e <__udivmoddi4+0xa2>
1a001a00:	deff      	udf	#255	; 0xff
1a001a02:	f1c7 0520 	rsb	r5, r7, #32
1a001a06:	40bb      	lsls	r3, r7
1a001a08:	fa22 fc05 	lsr.w	ip, r2, r5
1a001a0c:	ea4c 0c03 	orr.w	ip, ip, r3
1a001a10:	fa01 f407 	lsl.w	r4, r1, r7
1a001a14:	fa20 f805 	lsr.w	r8, r0, r5
1a001a18:	fa21 f305 	lsr.w	r3, r1, r5
1a001a1c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001a20:	ea48 0404 	orr.w	r4, r8, r4
1a001a24:	fbb3 f9fe 	udiv	r9, r3, lr
1a001a28:	0c21      	lsrs	r1, r4, #16
1a001a2a:	fb0e 3319 	mls	r3, lr, r9, r3
1a001a2e:	fa1f f88c 	uxth.w	r8, ip
1a001a32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001a36:	fb09 fa08 	mul.w	sl, r9, r8
1a001a3a:	459a      	cmp	sl, r3
1a001a3c:	fa02 f207 	lsl.w	r2, r2, r7
1a001a40:	fa00 f107 	lsl.w	r1, r0, r7
1a001a44:	d90b      	bls.n	1a001a5e <__udivmoddi4+0x1b2>
1a001a46:	eb1c 0303 	adds.w	r3, ip, r3
1a001a4a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001a4e:	f080 8088 	bcs.w	1a001b62 <__udivmoddi4+0x2b6>
1a001a52:	459a      	cmp	sl, r3
1a001a54:	f240 8085 	bls.w	1a001b62 <__udivmoddi4+0x2b6>
1a001a58:	f1a9 0902 	sub.w	r9, r9, #2
1a001a5c:	4463      	add	r3, ip
1a001a5e:	eba3 030a 	sub.w	r3, r3, sl
1a001a62:	b2a4      	uxth	r4, r4
1a001a64:	fbb3 f0fe 	udiv	r0, r3, lr
1a001a68:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001a70:	fb00 f808 	mul.w	r8, r0, r8
1a001a74:	45a0      	cmp	r8, r4
1a001a76:	d908      	bls.n	1a001a8a <__udivmoddi4+0x1de>
1a001a78:	eb1c 0404 	adds.w	r4, ip, r4
1a001a7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001a80:	d26b      	bcs.n	1a001b5a <__udivmoddi4+0x2ae>
1a001a82:	45a0      	cmp	r8, r4
1a001a84:	d969      	bls.n	1a001b5a <__udivmoddi4+0x2ae>
1a001a86:	3802      	subs	r0, #2
1a001a88:	4464      	add	r4, ip
1a001a8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001a8e:	eba4 0408 	sub.w	r4, r4, r8
1a001a92:	fba0 8902 	umull	r8, r9, r0, r2
1a001a96:	454c      	cmp	r4, r9
1a001a98:	46c6      	mov	lr, r8
1a001a9a:	464b      	mov	r3, r9
1a001a9c:	d354      	bcc.n	1a001b48 <__udivmoddi4+0x29c>
1a001a9e:	d051      	beq.n	1a001b44 <__udivmoddi4+0x298>
1a001aa0:	2e00      	cmp	r6, #0
1a001aa2:	d069      	beq.n	1a001b78 <__udivmoddi4+0x2cc>
1a001aa4:	ebb1 020e 	subs.w	r2, r1, lr
1a001aa8:	eb64 0403 	sbc.w	r4, r4, r3
1a001aac:	fa04 f505 	lsl.w	r5, r4, r5
1a001ab0:	fa22 f307 	lsr.w	r3, r2, r7
1a001ab4:	40fc      	lsrs	r4, r7
1a001ab6:	431d      	orrs	r5, r3
1a001ab8:	e9c6 5400 	strd	r5, r4, [r6]
1a001abc:	2700      	movs	r7, #0
1a001abe:	e746      	b.n	1a00194e <__udivmoddi4+0xa2>
1a001ac0:	4637      	mov	r7, r6
1a001ac2:	4630      	mov	r0, r6
1a001ac4:	e743      	b.n	1a00194e <__udivmoddi4+0xa2>
1a001ac6:	4618      	mov	r0, r3
1a001ac8:	e737      	b.n	1a00193a <__udivmoddi4+0x8e>
1a001aca:	4607      	mov	r7, r0
1a001acc:	e71f      	b.n	1a00190e <__udivmoddi4+0x62>
1a001ace:	f1c2 0320 	rsb	r3, r2, #32
1a001ad2:	fa20 f703 	lsr.w	r7, r0, r3
1a001ad6:	4095      	lsls	r5, r2
1a001ad8:	fa01 f002 	lsl.w	r0, r1, r2
1a001adc:	fa21 f303 	lsr.w	r3, r1, r3
1a001ae0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ae4:	4338      	orrs	r0, r7
1a001ae6:	0c01      	lsrs	r1, r0, #16
1a001ae8:	fbb3 f7fe 	udiv	r7, r3, lr
1a001aec:	fa1f f885 	uxth.w	r8, r5
1a001af0:	fb0e 3317 	mls	r3, lr, r7, r3
1a001af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001af8:	fb07 f308 	mul.w	r3, r7, r8
1a001afc:	428b      	cmp	r3, r1
1a001afe:	fa04 f402 	lsl.w	r4, r4, r2
1a001b02:	d907      	bls.n	1a001b14 <__udivmoddi4+0x268>
1a001b04:	1869      	adds	r1, r5, r1
1a001b06:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001b0a:	d228      	bcs.n	1a001b5e <__udivmoddi4+0x2b2>
1a001b0c:	428b      	cmp	r3, r1
1a001b0e:	d926      	bls.n	1a001b5e <__udivmoddi4+0x2b2>
1a001b10:	3f02      	subs	r7, #2
1a001b12:	4429      	add	r1, r5
1a001b14:	1acb      	subs	r3, r1, r3
1a001b16:	b281      	uxth	r1, r0
1a001b18:	fbb3 f0fe 	udiv	r0, r3, lr
1a001b1c:	fb0e 3310 	mls	r3, lr, r0, r3
1a001b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001b24:	fb00 f308 	mul.w	r3, r0, r8
1a001b28:	428b      	cmp	r3, r1
1a001b2a:	d907      	bls.n	1a001b3c <__udivmoddi4+0x290>
1a001b2c:	1869      	adds	r1, r5, r1
1a001b2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001b32:	d210      	bcs.n	1a001b56 <__udivmoddi4+0x2aa>
1a001b34:	428b      	cmp	r3, r1
1a001b36:	d90e      	bls.n	1a001b56 <__udivmoddi4+0x2aa>
1a001b38:	3802      	subs	r0, #2
1a001b3a:	4429      	add	r1, r5
1a001b3c:	1ac9      	subs	r1, r1, r3
1a001b3e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001b42:	e714      	b.n	1a00196e <__udivmoddi4+0xc2>
1a001b44:	4541      	cmp	r1, r8
1a001b46:	d2ab      	bcs.n	1a001aa0 <__udivmoddi4+0x1f4>
1a001b48:	ebb8 0e02 	subs.w	lr, r8, r2
1a001b4c:	eb69 020c 	sbc.w	r2, r9, ip
1a001b50:	3801      	subs	r0, #1
1a001b52:	4613      	mov	r3, r2
1a001b54:	e7a4      	b.n	1a001aa0 <__udivmoddi4+0x1f4>
1a001b56:	4660      	mov	r0, ip
1a001b58:	e7f0      	b.n	1a001b3c <__udivmoddi4+0x290>
1a001b5a:	4618      	mov	r0, r3
1a001b5c:	e795      	b.n	1a001a8a <__udivmoddi4+0x1de>
1a001b5e:	4667      	mov	r7, ip
1a001b60:	e7d8      	b.n	1a001b14 <__udivmoddi4+0x268>
1a001b62:	4681      	mov	r9, r0
1a001b64:	e77b      	b.n	1a001a5e <__udivmoddi4+0x1b2>
1a001b66:	4638      	mov	r0, r7
1a001b68:	e745      	b.n	1a0019f6 <__udivmoddi4+0x14a>
1a001b6a:	f1ac 0c02 	sub.w	ip, ip, #2
1a001b6e:	442b      	add	r3, r5
1a001b70:	e710      	b.n	1a001994 <__udivmoddi4+0xe8>
1a001b72:	3802      	subs	r0, #2
1a001b74:	442c      	add	r4, r5
1a001b76:	e721      	b.n	1a0019bc <__udivmoddi4+0x110>
1a001b78:	4637      	mov	r7, r6
1a001b7a:	e6e8      	b.n	1a00194e <__udivmoddi4+0xa2>

1a001b7c <__aeabi_idiv0>:
1a001b7c:	4770      	bx	lr
1a001b7e:	bf00      	nop

1a001b80 <__libc_init_array>:
1a001b80:	b570      	push	{r4, r5, r6, lr}
1a001b82:	4d0d      	ldr	r5, [pc, #52]	; (1a001bb8 <__libc_init_array+0x38>)
1a001b84:	4c0d      	ldr	r4, [pc, #52]	; (1a001bbc <__libc_init_array+0x3c>)
1a001b86:	1b64      	subs	r4, r4, r5
1a001b88:	10a4      	asrs	r4, r4, #2
1a001b8a:	2600      	movs	r6, #0
1a001b8c:	42a6      	cmp	r6, r4
1a001b8e:	d109      	bne.n	1a001ba4 <__libc_init_array+0x24>
1a001b90:	4d0b      	ldr	r5, [pc, #44]	; (1a001bc0 <__libc_init_array+0x40>)
1a001b92:	4c0c      	ldr	r4, [pc, #48]	; (1a001bc4 <__libc_init_array+0x44>)
1a001b94:	f7fe fd1d 	bl	1a0005d2 <_init>
1a001b98:	1b64      	subs	r4, r4, r5
1a001b9a:	10a4      	asrs	r4, r4, #2
1a001b9c:	2600      	movs	r6, #0
1a001b9e:	42a6      	cmp	r6, r4
1a001ba0:	d105      	bne.n	1a001bae <__libc_init_array+0x2e>
1a001ba2:	bd70      	pop	{r4, r5, r6, pc}
1a001ba4:	f855 3b04 	ldr.w	r3, [r5], #4
1a001ba8:	4798      	blx	r3
1a001baa:	3601      	adds	r6, #1
1a001bac:	e7ee      	b.n	1a001b8c <__libc_init_array+0xc>
1a001bae:	f855 3b04 	ldr.w	r3, [r5], #4
1a001bb2:	4798      	blx	r3
1a001bb4:	3601      	adds	r6, #1
1a001bb6:	e7f2      	b.n	1a001b9e <__libc_init_array+0x1e>
1a001bb8:	1a001e48 	.word	0x1a001e48
1a001bbc:	1a001e48 	.word	0x1a001e48
1a001bc0:	1a001e48 	.word	0x1a001e48
1a001bc4:	1a001e4c 	.word	0x1a001e4c

1a001bc8 <memset>:
1a001bc8:	4402      	add	r2, r0
1a001bca:	4603      	mov	r3, r0
1a001bcc:	4293      	cmp	r3, r2
1a001bce:	d100      	bne.n	1a001bd2 <memset+0xa>
1a001bd0:	4770      	bx	lr
1a001bd2:	f803 1b01 	strb.w	r1, [r3], #1
1a001bd6:	e7f9      	b.n	1a001bcc <memset+0x4>
1a001bd8:	1a000435 	.word	0x1a000435
1a001bdc:	1a000417 	.word	0x1a000417
1a001be0:	1a000403 	.word	0x1a000403
1a001be4:	1a0003e5 	.word	0x1a0003e5

1a001be8 <ExtRateIn>:
1a001be8:	00000000                                ....

1a001bec <GpioButtons>:
1a001bec:	08000400 09010900                       ........

1a001bf4 <GpioLeds>:
1a001bf4:	01050005 0e000205 0c010b01              ............

1a001c00 <GpioPorts>:
1a001c00:	03030003 0f050403 05031005 07030603     ................
1a001c10:	ffff0802                                ....

1a001c14 <OscRateIn>:
1a001c14:	00b71b00                                ....

1a001c18 <InitClkStates>:
1a001c18:	01010f01                                ....

1a001c1c <pinmuxing>:
1a001c1c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a001c2c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a001c3c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a001c4c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a001c5c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a001c6c:	00d50301 00d50401 00160107 00560207     ..............V.
1a001c7c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a001c8c:	00570206                                ..W.

1a001c90 <UART_BClock>:
1a001c90:	01a201c2 01620182                       ......b.

1a001c98 <UART_PClock>:
1a001c98:	00820081 00a200a1 08040201 0f0f0f03     ................
1a001ca8:	000000ff                                ....

1a001cac <periph_to_base>:
1a001cac:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001cbc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001ccc:	000100e0 01000100 01200003 00060120     .......... . ...
1a001cdc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001cec:	01820013 00120182 01a201a2 01c20011     ................
1a001cfc:	001001c2 01e201e2 0202000f 000e0202     ................
1a001d0c:	02220222 0223000d 001c0223              "."...#.#...

1a001d18 <InitClkStates>:
1a001d18:	00010100 00010909 0001090a 01010701     ................
1a001d28:	00010902 00010906 0101090c 0001090d     ................
1a001d38:	0001090e 0001090f 00010910 00010911     ................
1a001d48:	00010912 00010913 00011114 00011119     ................
1a001d58:	0001111a 0001111b                       ........

1a001d60 <gpioPinsInit>:
1a001d60:	02000104 00050701 05010d03 04080100     ................
1a001d70:	02020002 02000304 00000403 04070002     ................
1a001d80:	030c0300 09050402 05040103 04030208     ................
1a001d90:	04020305 06040504 0802000c 03000b06     ................
1a001da0:	00090607 07060503 060f0504 03030004     ................
1a001db0:	02000404 00050404 06040502 04060200     ................
1a001dc0:	0c050408 05040a04 0003010e 14010a00     ................
1a001dd0:	010f0000 0d000012 00001101 0010010c     ................
1a001de0:	07070300 000f0300 01000001 00000000     ................
1a001df0:	000a0600 08060603 06100504 04030005     ................
1a001e00:	03000106 04090400 04010d05 010b0000     ................
1a001e10:	0200000f 00000001 00010104 02010800     ................
1a001e20:	01090000 09010006 05040002 04010200     ................
1a001e30:	02020105 02020504 0e00000a 01000b02     ................
1a001e40:	000c020b ffff0c01                       ........
